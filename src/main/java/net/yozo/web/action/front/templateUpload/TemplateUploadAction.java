package net.yozo.web.action.front.templateUpload;import com.alibaba.fastjson.JSON;import net.yozo.services.front.account.bean.Account;import net.yozo.services.front.catalog.CatalogService;import net.yozo.services.front.catalog.bean.Catalog;import net.yozo.services.front.label.LabelService;import net.yozo.services.front.label.bean.Label;import net.yozo.services.front.label_link.Label_linkService;import net.yozo.services.front.label_link.bean.Label_link;import net.yozo.services.front.template.TemplateService;import net.yozo.services.front.template.bean.Template;import net.yozo.web.action.BaseController;import net.yozo.web.action.front.template.TemplateAction;import net.yozo.web.util.LoginUserHolder;import net.yozo.web.util.RequestHolder;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import javax.servlet.http.HttpServletRequest;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * 模板管理 *  * @author lijun1103@yozosoft.com * @author joey li *  */@Controller("frontTemplateUploadController")	@RequestMapping("/auth/account/templateUpload")	public class TemplateUploadAction extends BaseController<Template> {		private static final Logger logger = LoggerFactory.getLogger(TemplateAction.class);		@Autowired		private TemplateService templateService;		@Autowired		private LabelService labelService;		@Autowired		private Label_linkService label_linkService;		@Autowired		private CatalogService catalogService;		@Value("${website.url}")		private String websiteUrl;		private static final String page_toList = "/userUpload/userUpload";//"/manage/template/templateList";		private static final String page_toEdit = "/account/templateEdit";//"/manage/template/templateEdit";		private static final String page_toAdd = "/account/templateUpload";		private static final String toLogin = "/account/login";//转到登陆界面,forword方式 地址不变		private TemplateUploadAction() {			super.page_toList = page_toList;			super.page_toAdd = page_toAdd;			super.page_toEdit = page_toEdit;		}	public TemplateService getService() {		return templateService;	}	@Override	public String toAdd(@ModelAttribute("t")Template t, ModelMap model) throws Exception {		//验证登陆，并将登录用户信息放入"e"中		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		model.addAttribute("e", acc);		List AElabelList=loadLabel(121);		model.addAttribute("AElabelList", AElabelList);		List BQlabelList=loadLabel(125);		model.addAttribute("BQlabelList", BQlabelList);		Template t1=null;		model.addAttribute("t", t1);		model.addAttribute("t1", t);		return page_toAdd;	}	@Override	public String toEdit(@ModelAttribute("t") Template t, ModelMap model) throws Exception {		//验证登陆，并将登录用户信息放入"e"中		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		int flag=authorityJudge(t);//权限判断		if(flag==1){			return "404";		}		model.addAttribute("e", acc);		model.addAttribute("insertOrUpdateMsg", "");		model.addAttribute("catalogs", systemManager.getCatalogs());		if(StringUtils.isBlank(t.getId())){			throw new NullPointerException();		}		logger.error("t.getId() = " + t.getId());		//加载模板属性/参数对象		t = templateService.selectById(t.getId());		logger.error("t = " + t);		if((t==null || StringUtils.isBlank(t.getId()))&& !(t.getAuthor().equals(acc.getId()))){			throw new NullPointerException("根据模板ID查询不到指定的模板！");		}		int cid=Integer.parseInt(t.getCatalogID());		int seloption=getSeloption(cid);//根据类别获取下标		model.addAttribute("seloption", seloption);		List labellist=loadLabel(cid);//获取模板所属类别下的所有标签		t.setLabelList(labellist);		loadSelectLabel(t);		//removeSelectLabel(t,labellist);		if(cid==110||cid==144||cid==145){			model.addAttribute("officeLabelList", labellist);		}		model.addAttribute("AElabelList", loadLabel(121));		model.addAttribute("BQlabelList", loadLabel(125));		model.addAttribute("t", t);		return page_toEdit;	}	@Override	public String insert(HttpServletRequest request, Template t, RedirectAttributes flushAttrs) throws Exception {		//insert前设置 推荐置顶默认值为否		initRT(t);		int id = getService().insert(t);		logger.error("insert0.id="+id);		// 保存模板 与标签关系		insertOrUpdateCommon(t);		return "redirect:/auth/account/templateManage";	}	@Override	public String update(HttpServletRequest request, Template t, RedirectAttributes flushAttrs) throws Exception {		//update前设置 推荐置顶默认值为否		initRT(t);		getService().update(t);//更新模板信息		insertOrUpdateCommon(t);//更新模板的标签信息		return "redirect:/auth/account/templateManage";	}	/**	 * 添加或更新模板的公共功能	 * @throws IOException	 */	private void insertOrUpdateCommon(Template e) throws IOException {		logger.error("=insertOrUpdateCommon=");		//删除产品旧的属性列表		Label_link oldLabel = new Label_link();		oldLabel.settId(Integer.valueOf(e.getId()));		label_linkService.deleteByCondition(oldLabel);		//保存模板属性		logger.error("attrSelectIds="+e.getLabelSelectIds());		if(e.getLabelSelectIds()!=null && e.getLabelSelectIds().length>0){			for(int i=0;i<e.getLabelSelectIds().length;i++){				String attrID = e.getLabelSelectIds()[i];				if(StringUtils.isBlank(attrID)){					continue;				}				//插入数据到属性中间表				Label_link labelLink = new Label_link();				labelLink.setlId(Integer.valueOf(attrID));				labelLink.settId(Integer.valueOf(e.getId()));				label_linkService.insert(labelLink);			}		}	}	@RequestMapping(value="changeCatalog",method = RequestMethod.POST)	@ResponseBody	public String changeCatalog(String seloption){		String catalogId=getCatalogID(seloption);		List labellist=loadLabel(Integer.parseInt(catalogId));		String result= JSON.toJSON(labellist).toString();		System.out.println(result);		return result;	}	/**	 * 根据模板分类加载标签列表	 * @catalogID 模板类别ID	 */	private List<Label> loadLabel(int catalogID) {		Label label = new Label();		label.setCatalogID(catalogID);		List<Label> labelList = this.labelService.selectList(label);//根据catalogID选择出大标签		//加载每个标签下的子标签列表		if(labelList!=null && labelList.size()>0) {			label.setCatalogID(0);			label.setPid(0);//属性的			for (int i = 0; i < labelList.size(); i++) {				Label item = labelList.get(i);				label.setPid(Integer.valueOf(item.getId()));//设置子标签的pid为大标签的id				item.setLabelList(this.labelService.selectList(label));//选择出小标签			}		}		return labelList;	}	/*	*删除已存在的标签	*	* */	private void removeSelectLabel(Template t,List<Label> labelList){		List<Label> tLabelList=t.getLabelList();		if(tLabelList!=null&&tLabelList.size()>0){			for(int a=0;a<tLabelList.size();a++){				Label tlabel=tLabelList.get(a);//template拥有的小标签所属大标签的类				for(int b=0;b<tlabel.getLabelList().size();b++){					Label titem=tlabel.getLabelList().get(b);					List select=tlabel.getSelectedLabelList();					Label label=labelList.get(a);					for(int i=0;i<label.getLabelList().size();i++){						Label item=label.getLabelList().get(i);						for(int j=0;j<select.size();j++){							if(item.getId().equals(select.get(j))){								label.getLabelList().remove(i);								i--;							}						}					}				}			}		}	}	private void loadSelectLabel(Template t){		//如果模板ID不存在，则不加载模板选中的属性列表		if(StringUtils.isBlank(t.getId())){			return;		}		//加载模板所选中的标签列表		Label_link labelLink = new Label_link();		labelLink.settId(Integer.valueOf(t.getId()));		List<Label_link> labelLinkList = label_linkService.selectList(labelLink);		if(labelLinkList!=null && labelLinkList.size()>0){			if(t.getLabelList()!=null && t.getLabelList().size()>0){				for(int i=0;i<t.getLabelList().size();i++){//循环主属性					Label mainLabel = t.getLabelList().get(i);					List<String> selectedLabelList = new ArrayList<String>();					List<Label> itemList = mainLabel.getLabelList();					for(int j=0;j<itemList.size();j++){//循环子标签列表						Label itemInfo = itemList.get(j);						int _labelID = Integer.valueOf(itemInfo.getId());						for(int k=0;k<labelLinkList.size();k++){//循环用户选择的标签							Label_link al = labelLinkList.get(k);							if(al.getlId()==_labelID){								mainLabel.setSelectedID(_labelID);								selectedLabelList.add(_labelID+"");							}						}						mainLabel.setSelectedLabelList(selectedLabelList);					}				}			}		}	}	//根据CatalogCode包含的关键字获取CatalogID(模板类别)	private String getCatalogID(String seloption){		String catalogId="";		if(seloption.toLowerCase().contains("ppt")){			catalogId=catalogService.selectCatalogIDbyCode("ppt");		}else if(seloption.toLowerCase().contains("word")){			catalogId=catalogService.selectCatalogIDbyCode("word");		}else if(seloption.toLowerCase().contains("excel")){			catalogId=catalogService.selectCatalogIDbyCode("excel");		}else if(seloption.toLowerCase().contains("ae")){			catalogId=catalogService.selectCatalogIDbyCode("ae");		}else if(seloption.toLowerCase().contains("biaoqing")){			catalogId=catalogService.selectCatalogIDbyCode("biaoqing");		}		return catalogId;	}	//根据CatalogID获取catalog的关键字（所需关键字与前台相关）	private String getSeloption(String catalogId){		String seloption="";		Catalog catalog=catalogService.selectById(catalogId);		String catalogCode=catalog.getCode();		if(catalogCode.toLowerCase().contains("ppt")){			seloption="ppt";		}else if(catalogCode.toLowerCase().contains("word")){			seloption="word";		}else if(catalogCode.toLowerCase().contains("excel")){			seloption="excel";		}else if(catalogCode.toLowerCase().contains("ae")){			seloption="ae";		}else if(catalogCode.toLowerCase().contains("biaoqing")){			seloption="biaoqing";		}		return seloption;	}	//删（等toEdit删除时可删）	private int getSeloption(int catalogId){		int seloption=0;		if(catalogId==110){			seloption=1;		}else if(catalogId==144){			seloption=2;		}else if(catalogId==145){			seloption=3;		}else if(catalogId==121){			seloption=4;		}else if(catalogId==125){			seloption=5;		}		return seloption;	}	/**	 *  设置 推荐置顶默认值	 * @param t	 */	private void initRT(Template t){		//根据类别指定值		String catalog= RequestHolder.getRequest().getParameter("catalog");		if(catalog.equals("office")){			String type=RequestHolder.getRequest().getParameter("type");			if(!"edit".equals(type)){				String officeType=RequestHolder.getRequest().getParameter("officeType");				String ca=getCatalogID(officeType);				t.setCatalogID(ca);			}else{				t.setShowModel(0);			}		}else if(catalog.equals("ae")){			int aeType= Integer.parseInt(RequestHolder.getRequest().getParameter("videUrl"));			if(aeType==2){				String linkVideo=RequestHolder.getRequest().getParameter("linkVideo");				t.setVideoUrl(linkVideo);			}			t.setImgUrl(t.getShrinkUrl());//ae模板设置详情图片与预览图一致			t.setCatalogID("121");		}else if(catalog.equals("bq")){			t.setImgUrl(t.getShrinkUrl());//设置表情包详情图与预览图一致			t.setCatalogID("125");		}		//设置不推荐		if(StringUtils.isEmpty(t.getIsRecommend())){			t.setIsRecommend("n");		}		//设置不置顶		if(StringUtils.isEmpty(t.getIsTop())){			t.setIsTop("n");		}		t.setSource(2);//初始化为用户上传;(source:1为后台上传，2为用户上传)		t.setStatus(0);//insert时，设置为状态为新增		t.setNowPrice(t.getPrice());//暂时设置原价与现价相同	}	@RequestMapping("officeUpload")	public String officeUpload(ModelMap model,@ModelAttribute("t")Template t,HttpServletRequest request) throws Exception{		Account acc = LoginUserHolder.getLoginAccount();		if(acc==null || StringUtils.isBlank(acc.getId())){			return "redirect:/account/login";		}		model.addAttribute("e", acc);		model.addAttribute("seloption",0);		Template t1=new Template();		model.addAttribute("type","upload");		model.addAttribute("t", t1);		return "/account/officeUpload";	}	@RequestMapping("aeUpload")	public String aeUpload(ModelMap model,@ModelAttribute("t")Template t,HttpServletRequest request) throws Exception{		Account acc = LoginUserHolder.getLoginAccount();		if(acc==null || StringUtils.isBlank(acc.getId())){			return "redirect:/account/login";		}		model.addAttribute("e", acc);		int catalogId=Integer.parseInt(getCatalogID("ae"));		List labelList=loadLabel(catalogId);		model.addAttribute("labelList", labelList);		Template t1=new Template();		model.addAttribute("type","upload");		model.addAttribute("t", t1);		return "/account/aeUpload";	}	@RequestMapping("bqUpload")	public String bqUpload(ModelMap model,@ModelAttribute("t")Template t,HttpServletRequest request) throws Exception{		Account acc = LoginUserHolder.getLoginAccount();		if(acc==null || StringUtils.isBlank(acc.getId())){			return "redirect:/account/login";		}		model.addAttribute("e", acc);		int catalogId=Integer.parseInt(getCatalogID("biaoqing"));		List labelList=loadLabel(catalogId);		model.addAttribute("labelList", labelList);		Template t1=new Template();;		model.addAttribute("type","upload");		model.addAttribute("t", t1);		return "/account/bqUpload";	}	@RequestMapping("officeEdit")	public String officeEdit(ModelMap model,@ModelAttribute("t")Template t,HttpServletRequest request) throws Exception{		int flag=authorityJudge(t);//权限判断        if(flag!=0){            if(flag==2){                return "redirect:/account/login";            }else{                return "404";            }        }		Map<String,Object> m = templateEdit(t);		String seloption=(String) m.get("seloption");		if(seloption.toLowerCase().contains("ae")||seloption.toLowerCase().contains("biaoqing")){			return "404";		}		model.addAttribute("e", m.get("e"));		model.addAttribute("seloption", m.get("seloption"));		model.addAttribute("labelList", m.get("labelList"));        model.addAttribute("t",  m.get("t"));        model.addAttribute("type", m.get("type"));		return "/account/officeUpload";	}	@RequestMapping("aeEdit")	public String aeEdit(ModelMap model,@ModelAttribute("t")Template t,HttpServletRequest request) throws Exception{		int flag=authorityJudge(t);//权限判断		if(flag!=0){			if(flag==2){				return "redirect:/account/login";			}else{				return "404";			}		}		Map<String,Object> m = templateEdit(t);		String seloption=(String) m.get("seloption");		if(!seloption.toLowerCase().contains("ae")){			return "404";		}		int videoType=1;		t=(Template)m.get("t");		if(!t.getVideoUrl().toLowerCase().startsWith(websiteUrl)){			videoType=2;		}		model.addAttribute("videoType",videoType);		model.addAttribute("e", m.get("e"));		model.addAttribute("labelList", m.get("labelList"));		model.addAttribute("t",  m.get("t"));        model.addAttribute("type", m.get("type"));		return "/account/aeUpload";	}	@RequestMapping("bqEdit")	public String bqEdit(ModelMap model,@ModelAttribute("t")Template t,HttpServletRequest request) throws Exception{		int flag=authorityJudge(t);//权限判断		if(flag!=0){			if(flag==2){				return "redirect:/account/login";			}else{				return "404";			}		}		Map<String,Object> m = templateEdit(t);		String seloption=(String) m.get("seloption");		if(!seloption.toLowerCase().contains("biaoqing")){			return "404.jsp";		}		model.addAttribute("e", m.get("e"));		model.addAttribute("labelList", m.get("labelList"));		model.addAttribute("t",  m.get("t"));		model.addAttribute("type", m.get("type"));		return "/account/bqUpload";	}	private Map templateEdit(Template t){		Map<String,Object> map = new HashMap<String,Object>();		//验证登陆，并将登录用户信息放入"e"中		Account acc = LoginUserHolder.getLoginAccount();		map.put("e",acc);		if(StringUtils.isBlank(t.getId())){			throw new NullPointerException();		}		//加载模板属性/参数对象		t = templateService.selectById(t.getId());		int cid=Integer.parseInt(t.getCatalogID());		List labellist=loadLabel(cid);//获取模板所属类别下的所有标签        t.setLabelList(labellist);		//t.setLabelList(loadLabel(cid));		loadSelectLabel(t);//获取模板的标签		//removeSelectLabel(t,labellist);		String seloption=getSeloption(t.getCatalogID());//根据类别获取下标		map.put("seloption",seloption);		map.put("labelList",labellist);		map.put("t",t);		if(t.getStatus()==1){		    map.put("type","edit");        }else{            map.put("type","reupload");        }		return map;	}	//用户编辑模板，权限判断	private int authorityJudge(Template t){		int flag=0;		Account acc = LoginUserHolder.getLoginAccount();		if(acc==null || StringUtils.isBlank(acc.getId())){			return 2;		}		String t_id=t.getId();		t = templateService.selectById(t.getId());		if((t==null || StringUtils.isBlank(t.getId()))){			flag=1;			logger.error("模板不存在。模板id:"+t_id+",操作用户id:"+acc.getId());		}else if(!(t.getAuthor().equals(acc.getId()))){			flag=1;			logger.error("用户没有权限编辑该模板，非法操作。模板id:"+t_id+",操作用户id:"+acc.getId());		}else if(t.getStatus()==0){			flag=1;			logger.error("模板待审核，用户非法操作。模板id:"+t_id+",操作用户id:"+acc.getId());		}		return flag;	}}