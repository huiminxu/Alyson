package net.yozo.web.action.front.account;import com.alibaba.fastjson.JSON;import net.sf.json.JSONObject;import net.yozo.account.dto.AccountLevel;import net.yozo.account.dto.AccountRank;import net.yozo.account.entity.TAccount;import net.yozo.account.mapper.ext.TAccountExtMapper;import net.yozo.core.front.SystemManager;import net.yozo.services.common.Prize;import net.yozo.services.common.Result;import net.yozo.services.front.TopicTemplate.TopicTemplateService;import net.yozo.services.front.applyEnchashment.ApplyEnchashmentService;import net.yozo.services.front.applyEnchashment.bean.ApplyEnchashment;import net.yozo.services.front.bankAccount.BankAccountService;import net.yozo.services.front.bankAccount.bean.BankAccount;import net.yozo.services.front.customizeOrder.CustomizeOrderService;import net.yozo.services.front.customizeOrder.bean.CustomizeOrder;import net.yozo.services.front.designer.DesignerService;import net.yozo.services.front.designer.bean.Designer;import net.yozo.services.front.enchashmentRecord.EnchashmentRecordService;import net.yozo.services.front.enchashmentRecord.bean.EnchashmentRecord;import net.yozo.services.front.prize.PrizeService;import net.yozo.account.dto.AccountInfo;import net.yozo.core.FrontContainer;import net.yozo.core.cache.RedisCacheProvider;import net.yozo.core.dao.page.PagerModel;import net.yozo.core.util.AddressUtils;import net.yozo.core.util.DateTimeUtil;import net.yozo.core.util.MD5;import net.yozo.services.front.account.AccountService;import net.yozo.services.front.account.bean.Account;import net.yozo.services.front.account.bean.LoginTypeEnum;import net.yozo.services.front.address.AddressService;import net.yozo.services.front.address.bean.Address;import net.yozo.services.front.area.bean.Area;import net.yozo.services.front.download.DownloadService;import net.yozo.services.front.download.bean.Download;import net.yozo.services.front.email.EmailService;import net.yozo.services.front.email.bean.Email;import net.yozo.services.front.favorite.FavoriteService;import net.yozo.services.front.favorite.bean.Favorite;import net.yozo.services.front.news.NewsService;import net.yozo.services.front.notifyTemplate.bean.NotifyTemplate;import net.yozo.services.front.order.OrderService;import net.yozo.services.front.order.bean.Order;import net.yozo.services.front.order.bean.OrderSimpleReport;import net.yozo.services.front.scoreDetail.ScoreDetailService;import net.yozo.services.front.scoreDetail.bean.ScoreDetail;import net.yozo.services.front.scoreTask.ScoreTaskService;import net.yozo.services.front.scoreTask.bean.ScoreTask;import net.yozo.services.front.template.TemplateService;import net.yozo.services.front.template.bean.Template;import net.yozo.services.front.topic.bean.Topic;import net.yozo.web.action.BaseController;import net.yozo.web.action.front.orders.CartInfo;import net.yozo.web.util.LoginUserHolder;import net.yozo.web.util.RequestHolder;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.ModelAndView;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;import java.io.IOException;import java.io.InputStream;import java.math.BigDecimal;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.*;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * 门户会员服务类 *  * @author huangf *  */@Controller("frontAccountController")public class AccountAction extends BaseController<Account> {	//private static final org.apache.logging.log4j.Logger logger = org.apache.logging.log4j.LogManager.getLogger(AccountAction.class);	private static final org.apache.logging.log4j.Logger logger = org.apache.logging.log4j.LogManager.getLogger(AccountAction.class);	private static final long serialVersionUID = 1L;	private static SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");	@Autowired	private TAccountExtMapper tAccountExtMapper;	@Autowired	private AccountService accountService;	@Autowired	private OrderService orderService;	@Autowired	private PrizeService prizeService;	@Autowired	private NewsService newsService;	@Autowired	private TemplateService templateService;//商品服务	@Autowired	private AddressService addressService;//配送地址service//	private List<Address> addressList;//配送地址列表	@Autowired	private FavoriteService favoriteService;//商品收藏夹	@Autowired	private DownloadService downloadService;//模板下载	@Autowired	private ScoreTaskService scoreTaskService;//模板下载	@Autowired	private ScoreDetailService scoreDetailService;//模板下载	@Autowired	private RedisCacheProvider redisCacheProvider;//redis	@Autowired	private CustomizeOrderService customizeOrderService;//定制订单	@Autowired	private DesignerService designerService;//设计师	@Autowired	private EnchashmentRecordService enchashmentRecordService;//提现	@Autowired	private BankAccountService bankAccountService;//提现账户	@Autowired	private ApplyEnchashmentService applyEnchashmentService;//提现	/*@Autowired	private AccountInfoService accountInfoService;//redis*/	@Resource(name="accountInfoServicenew")	private net.yozo.account.service.AccountInfoService accountInfoService;	//	private String selectLeftMenu;//选中的个人中心的菜单项	@Autowired	private EmailService emailService;	@Value("${website.url}")	private String webUrl;	@Value("${cas.casServerUrlPrefix}")	private String casServerUrlPrefix;	@Autowired	private TopicTemplateService topicTemplateService;//	private String helpCode;//帮助code//	private News news;//文章//	private Address address;//配送地址//	private OrderSimpleReport orderSimpleReport;//简单报表		private static final Object qq_login_lock = new Object();//qq登陆，本地锁	private static final Object sinawb_login_lock = new Object();//新浪微博登陆，本地锁		// 登陆错误信息	private static final String toLogin = "/account/login";//转到登陆界面,forword方式 地址不变	private static final String toLoginRedirect = "redirect:/account/login";//转到登陆界面,getResponse().sendRedirect(arg0)方式 地址变化	private static final String toIndex = "redirect:/";//转到门户首页	@Override	public AccountService getService() {		return accountService;	}	public void setAccountService(AccountService accountService) {		this.accountService = accountService;	}	public void prepare(Account e) throws Exception {		logger.error("AccountAction.prepare...");//		if (e == null) {//			e = new Account();//		}else{//			e.clear();//		}////		if(address==null){//			this.address = new Address();//		}else{//			address.clear();//		}////		errorMsg = null;////		if(orderSimpleReport!=null){//			orderSimpleReport.clear();//			orderSimpleReport = null;//		}////		/**//		 * 清除地址列表数据//		 *///		if(addressList!=null && addressList.size()>0){//			for(int i=0;i<addressList.size();i++){//				addressList.get(i).clear();//			}//			addressList.clear();//			addressList = null;//		}////		super.setSelectMenu(FrontContainer.not_select_menu);//设置主菜单为不选中	}	/**	 * 用户注册	 * 	 * @return	 * @throws IOException 	 */	@RequestMapping(value = "account/doRegister", method = RequestMethod.POST)	public String doRegister(Account e, ModelMap model, RedirectAttributes  attr, HttpServletRequest request) throws IOException {		if(StringUtils.isBlank(e.getEmail())){			throw new NullPointerException("邮箱不能为空！");		}				e.setPassword(MD5.md5(e.getPassword()));		if (StringUtils.isBlank(e.getId())) {			// 用户注册			e.setAccount(e.getEmail());			e.setNickname(genareteNickname());			e.setScore(100);  //注册送积分			getService().insert(e);			accountService.sendEmail(e, NotifyTemplate.email_reg);		} else {			// 修改密码//			getServer().update(e);			throw new NullPointerException("不支持！");		}		//mv.addObject("uid",e.getId()+"");		attr.addAttribute("uid",e.getId()+"");		//mv.setViewName("redirect:/account/checkEmail.html");		request.getSession().setAttribute("currentEmail",e.getEmail());		request.getSession().setAttribute("emailURL",getEmailURL(e.getEmail()));		return "redirect:/account/checkEmail.html";	}		/**	 * 用户注册--》再次发送邮件	 * @return	 * @throws IOException 	 */	@RequestMapping(value = "account/sendEmailAgain")	public String sendEmailAgain(String uid, ModelMap model) throws IOException{		if(StringUtils.isBlank(uid)){			throw new NullPointerException("参数不正确！");		}				Account acc = accountService.selectById(uid);		if(acc==null){			throw new NullPointerException("根据用户ID查询不到用户信息！");		}				accountService.sendEmail(acc, NotifyTemplate.email_reg);		model.addAttribute("uid", acc.getId());//		getResponse().sendRedirect(SystemManager.systemSetting.getWww()+"/account/checkEmail.html");		return "redirect:/account/checkEmail.html";	}	/**	 * 转到邮箱验证提示页面	 * @return	 */	@RequestMapping("account/checkEmail")	public String checkEmail(ModelMap map, @ModelAttribute("uid") String uid){		logger.info("checkEmail");		map.addAttribute("uid",uid);//		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);//		if (acc == null || StringUtils.isBlank(acc.getAccount())) {//			return toLogin;//		}		return "/account/regsuccess";	}		/**	 * 转到忘记密码页面	 * @return	 */	@RequestMapping("account/forget")	public String forget(){		return "/account/forget";	}		/**	 * 找回密码	 * @return	 * @throws Exception 	 */	@RequestMapping(value = "account/doForget", method = RequestMethod.POST)	public String doForget(Account e, ModelMap model,HttpServletRequest request) throws Exception{//		synchronized (this) {//			String token = getRequest().getParameter("token");//			logger.error("doForget...token="+token);//			boolean _isTokenValid = TokenUtil.getInstance().isTokenValid(getRequest());//			logger.error("_isTokenValid = " + _isTokenValid);//			if(!TokenUtil.getInstance().isTokenValid(getRequest())){//				throw new Exception("表单重复提交了！");//			}//		}//		String account = getRequest().getParameter("account");//		if(StringUtils.isNotBlank(account)){//			//如果此值不为空，则说明是 重新发送按钮 请求的此方法。重新发送按钮来重发邮件//			e.setAccount(account);//		}				accountService.doForget(e);		request.getSession().setAttribute("currentEmail",e.getEmail());		request.getSession().setAttribute("emailURL",getEmailURL(e.getEmail()));		//等待用户检查短信或邮件		return "redirect:/account/waitUserCheck.html";	}	@RequestMapping("account/waitUserCheck")	public String waitUserCheck(){		return "/account/waitUserCheck";	}		/**	 * 此方法暂时没有用处	 * ajax检查用户名称是否存在	 * @return	 * @throws IOException 	 */	@RequestMapping("account/checkAccountExist")	@ResponseBody	public String checkAccountExist(Account e) throws IOException{		if(StringUtils.isBlank(e.getAccount())){			return ("{\"error\":\"用户名不能为空!\"}");		}else{			Account acc = new Account();			acc.setAccount(e.getAccount());			if(accountService.selectCount(acc)==0){				return ("{\"error\":\"用户名不存在!\"}");			}else{				return ("{\"ok\":\"用户名输入正确!\"}");			}		}	}	/**	 * ajax检查用户名称是否存在	 * @return	 * @throws IOException	 */	@RequestMapping("account/checkEmailExist")	@ResponseBody	public String checkEmailExist(Account e) throws IOException{		if(StringUtils.isBlank(e.getEmail())){			return ("{\"error\":\"邮箱不能为空!\"}");		}else{			Account acc = new Account();			acc.setEmail(e.getEmail());			if(accountService.selectCount(acc)==0){				return ("{\"error\":\"邮箱不存在!\"}");			}else{				return ("{\"ok\":\"邮箱输入正确!\"}");			}		}	}	/**	 * ajax检查密码是否正确	 * @return	 * @throws IOException 	 */	@RequestMapping("account/checkPassword")	@ResponseBody	public String checkPassword(Account e) throws IOException{		if(StringUtils.isBlank(e.getPassword())){			return ("{\"error\":\"密码不能为空!\"}");		}else{			Account acc = new Account();			acc.setPassword(MD5.md5(e.getPassword()));			if(accountService.selectCount(acc)==0){				return ("{\"error\":\"输入的密码不正确!\"}");			}else{				return ("{\"ok\":\"密码正确!\"}");			}		}	}		/**	 * ajax检查新邮箱不能和原邮箱一致	 * @return	 * @throws IOException 	 */	@RequestMapping("auth/account/changeEmailCheck")	@ResponseBody	public String changeEmailCheck(Account e) throws IOException{		if(StringUtils.isBlank(e.getNewEmail())){			return ("{\"error\":\"新邮箱不能为空!\"}");		}else{			Account acc = (Account) RequestHolder.getSession().getAttribute(FrontContainer.USER_INFO);			if (acc == null || StringUtils.isBlank(acc.getId())) {				return toLogin;			}						if(acc.getEmail().equals(e.getNewEmail())){				return ("{\"error\":\"新邮箱不能和原邮箱一致!\"}");			}else{				return ("{\"ok\":\"系统认为此邮箱可用!\"}");			}		}	}		/**	 * 转到登陆页面	 * @return	 */	@RequestMapping("account/login")	public String login(HttpServletRequest request) {		logger.error("toLogin...");		if (LoginUserHolder.getLoginAccount() != null) {			return toIndex;		}		return toLogin;	}		/**	 * 转到注册页面	 * @return	 */	@RequestMapping("account/register")	public String register() {		logger.error("register...");		if (LoginUserHolder.getLoginAccount() != null) {			return toIndex;		}		return "/account/register";	}		/**	 * 用户登陆	 * 	 * @return	 */	@RequestMapping("account/doLogin")	public ModelAndView doLogin(Account e, ModelMap model,HttpServletRequest request, RedirectAttributes flushAttrs) {		logger.error("doLogin()...");		ModelAndView mv = new ModelAndView();		String lastUrl = (String)request.getSession().getAttribute("lastUrl");		System.out.println(lastUrl);		if (LoginUserHolder.getLoginAccount() != null) {			mv.setViewName(toIndex);			return mv;		}		String errorMsg = "<font color='red'>帐号或密码错误!</font>";		if (e.getAccount() == null || e.getAccount().trim().equals("")				|| e.getPassword() == null || e.getPassword().trim().equals("")){			model.addAttribute("errorMsg", errorMsg);			logger.error("doLogin.errorMsg="+errorMsg);			mv.setViewName(toLogin);			return mv;		}		//用于将错误信息返回显示		Account etoreturn=new Account();		etoreturn.setAccount(e.getAccount());		etoreturn.setPassword(e.getPassword());		//用户验证		e.setPassword(MD5.md5(e.getPassword()));		String account = e.getAccount();		String password = e.getPassword();		e.clear();		//邮箱正则表达式的验证		Pattern p1=Pattern.compile("^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+");		Matcher m1=p1.matcher(account);		//手机号的正则表达式的验证		Pattern p2=Pattern.compile("^1[0-9]{10}$");		Matcher m2=p2.matcher(account);		if(m1.matches()){			e.setEmail(account);			e.setPassword(password);		}else if(m2.matches()){			e.setTel(account);			e.setPassword(password);		}else{			model.addAttribute("errorMsg", errorMsg);			logger.error("doLogin.errorMsg="+errorMsg);			//将上一次填写的信息原样返回			model.addAttribute("theWrongInfo",etoreturn);			mv.setViewName(toLogin);			return mv;		}		Account acc = accountService.selectOne(e);		if (acc == null) {			model.addAttribute("errorMsg", errorMsg);			//将上一次填写的信息原样返回			model.addAttribute("theWrongInfo",etoreturn);			mv.setViewName(toLogin);			return mv;		}else if(acc.getFreeze().equals(Account.account_freeze_y)){			if(StringUtils.isBlank(acc.getFreezeStartdate()) && StringUtils.isBlank(acc.getFreezeEnddate())){				model.addAttribute("errorMsg", "<font color='red'>此账号已永久冻结!有疑问请联系站点管理员!</font>");			}else{				model.addAttribute("errorMsg", "<font color='red'>此账号已暂时冻结!有疑问请联系站点管理员!</font>");			}			//将上一次填写的信息原样返回			model.addAttribute("theWrongInfo",etoreturn);			mv.setViewName(toLogin);			return mv;		}else if(Account.account_emailIsActive_n.equals(acc.getEmailIsActive()) && m1.matches()){			//邮箱未激活			errorMsg = "<font color='red'>此账号的邮箱尚未激活，请立即去激活邮箱！</font>";			model.addAttribute("errorMsg", errorMsg);			//将上一次填写的信息原样返回			model.addAttribute("theWrongInfo",etoreturn);			mv.setViewName(toLogin);			return mv;		}		errorMsg = null;		acc.setLoginType(LoginTypeEnum.system);//登陆方式		RequestHolder.getSession().setAttribute(FrontContainer.USER_INFO, acc);		//更新用户最后登录时间		e.clear();		e.setId(acc.getId());		e.setLastLoginTime("yes");		e.setLastLoginIp(AddressUtils.getIp(RequestHolder.getRequest()));		String address = null;		try {			address = AddressUtils.getAddresses("ip=" + e.getLastLoginIp(), "utf-8");		} catch (Exception ex) {			ex.printStackTrace();		}		e.setLastLoginArea(address);		accountService.update(e);		if(StringUtils.isNotEmpty(lastUrl)){			if(lastUrl.contains("search")){				System.out.println("----before url："+lastUrl);				String t[] = lastUrl.substring(lastUrl.indexOf("?")+1).split("&");				for(String tt:t){					String name = tt.split("=")[0];					String value = tt.split("=")[1];					mv.addObject(name,value);				}				lastUrl = lastUrl.substring(0,lastUrl.indexOf("?"));;			}			mv.setViewName("redirect:/"+lastUrl);		}else{			mv.setViewName(toIndex);		}		return mv;	}	/**	 *	 * @return	 */	@RequestMapping("account/exit")	public String exit() {		logout();		return "redirect:/account/login";	}	/**	 * 用户注销	 * 	 * @return	 */	@RequestMapping("account/logout")	public String logout() {		//清除用户session		RequestHolder.getSession().setAttribute(FrontContainer.USER_INFO, null);				//清除用户购物车缓存		CartInfo cartInfo = (CartInfo) RequestHolder.getSession().getAttribute(FrontContainer.myCart);		if(cartInfo!=null){			cartInfo.clear();		}		RequestHolder.getSession().setAttribute("lastUrl", null);		RequestHolder.getSession().setAttribute(FrontContainer.myCart, null);		RequestHolder.getSession().setAttribute(FrontContainer.history_product_map, null);		return toLogin;	}		/**	 * 分页查询商品收藏夹	 * @return	 * @throws Exception 	 */	@RequestMapping("auth/account/favorite")	public String favorite(ModelMap model,HttpServletRequest request) throws Exception{		Account acc = (Account) LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getId())) {			return toLogin;		}		Favorite favorite = new Favorite();		favorite.setAccount(acc.getId());		PagerModel pager = selectPagerFavoriteList(favorite);		pager.setPagerUrl("favorite");//		request.getSession().setAttribute("favoriteCount",favoriteService.selectCount(favorite));//模板收藏数量//		Download download=new Download();//		download.setAccount(acc.getId());//		request.getSession().setAttribute("downloadCount",downloadService.selectCount(download));//模板下载数量		if(pager!=null && pager.getList()!=null && pager.getList().size()>0){			List<String> templateIds = new LinkedList<String>();			for(int i=0;i<pager.getList().size();i++){				Favorite ff = (Favorite)pager.getList().get(i);				templateIds.add(ff.getProductID());			}						//根君商品ID集合加载商品信息：名称、价格、销量、是否上下架等			Template p = new Template();			p.setTemplateIds(templateIds);			List<Template> templateList = templateService.selectTemplateListByIds(p);			//将查询出来的每一个商品对象挂到收藏夹对象上去			if(templateList!=null && templateList.size()>0){				for(int i=0;i<pager.getList().size();i++){					Favorite ff = (Favorite)pager.getList().get(i);					ff.setTemplate(null);					for(int j=0;j<templateList.size();j++){						Template template = templateList.get(j);						if(ff.getProductID() != null && ff.getProductID().equals(template.getId())){							ff.setTemplate(template);							break;						}					}					if(ff.getTemplate() == null){						//TODO 产品已经不存在					}				}			}		}//		selectLeftMenu = FrontContainer.user_leftMenu_favorite;		model.addAttribute("pager", pager);		request.getSession().setAttribute("favoriteCount",pager.getTotal());		request.getSession().setAttribute("subjectFavoriteCount",favoriteService.selectTopicCount(favorite));		return "/account/favorite";	}	/**	 * 分页查询商品收藏夹	 * @return	 * @throws Exception	 */	@RequestMapping("/auth/account/subjectFavorite")	public String favoriteTopic(ModelMap model,HttpServletRequest request) throws Exception{		Account acc = (Account) LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getId())) {			return toLogin;		}		Favorite favorite = new Favorite();		favorite.setAccount(acc.getId());		favorite.setPagerSize(9);		PagerModel pager = favoriteService.selectTopicByAccount(favorite);		pager.setPagerUrl("subjectFavorite");		if (pager.getList() != null && pager.getList().size() >0){			for (Object obj:pager.getList()){				Topic topic = (Topic) obj;				PagerModel tem =topicTemplateService.selectTopicTemplate(Integer.valueOf(topic.getId()),null);				if (tem != null && tem.getList() != null && tem.getList().size()>0){					topic.setTopicImage(((Template)tem.getList().get(0)).getShrinkUrl());				}			}		}		model.addAttribute("pager", pager);		request.getSession().setAttribute("favoriteCount",favoriteService.selectCount(favorite));		request.getSession().setAttribute("subjectFavoriteCount",pager.getTotal());		return "/account/subjectFavorite";	}	private PagerModel selectPagerFavoriteList(Favorite fovorite){		int offset = 0;		String pagerOffset = RequestHolder.getRequest().getParameter("pager.offset");		if (StringUtils.isNotBlank(pagerOffset)) {//			throw new NullPointerException();			offset = Integer.parseInt(pagerOffset);		}		if (offset < 0)			offset = 0;		fovorite.setOffset(offset);		PagerModel servicesPager = favoriteService.selectPageList(fovorite);		servicesPager.setOffset(offset);		if(servicesPager==null)servicesPager = new PagerModel();		// 计算总页数		servicesPager.setPagerSize((servicesPager.getTotal() + servicesPager.getPageSize() - 1)				/ servicesPager.getPageSize());		return servicesPager;	}		/**	 * ajax验证输入的字符的唯一性	 * @return	 * @throws IOException	 */	@RequestMapping("account/unique")	@ResponseBody	public String unique(Account e,HttpServletRequest request, String phone) throws IOException{		logger.error("验证输入的字符的唯一性"+e);		logger.error(e.getNickname());		if(StringUtils.isNotBlank(e.getNickname())){//验证昵称是否被占用			logger.error("验证昵称是否被占用");			String nickname = e.getNickname();			String primaryNick=request.getParameter("primaryNick");			if(primaryNick.equals(nickname)){				return ("{\"ok\":\"昵称可以使用!\"}");			}			e.clear();			e.setNickname(nickname);			if (accountService.selectCount(e)>0){				return ("{\"error\":\"昵称已经被占用!\"}");			}else{				return ("{\"ok\":\"昵称可以使用!\"}");			}		}else if(StringUtils.isNotBlank(e.getAccount())){//验证用户名是否被占用			logger.error("验证用户名是否被占用");			String account = e.getAccount();			e.clear();			e.setAccount(account);			if (accountService.selectCount(e)>0){				return ("{\"error\":\"用户名已经被占用!\"}");			}else{				return ("{\"ok\":\"用户名可以使用!\"}");			}		}else if(StringUtils.isNotBlank(e.getEmail())){//验证邮箱是否被占用			logger.error("验证邮箱是否被占用="+e.getEmail());			String email = e.getEmail();			e.clear();			e.setEmail(email);			if (accountService.selectCount(e) > 0){				return ("{\"error\":\"邮箱已经被占用!\"}");			}else{				return ("{\"ok\":\"邮箱可以使用!\"}");			}		}else if(StringUtils.isNotBlank(e.getVcode())){//验证验证码输入的是否正确			logger.error("检查验证码输入的是否正确"+e.getVcode());			String validateCode = request.getSession().getAttribute(FrontContainer.validateCode).toString();			logger.error("validateCode=" + validateCode);			if(validateCode.equalsIgnoreCase(e.getVcode())){				return ("{\"ok\":\"验证码输入正确!\"}");			}else{				return ("{\"error\":\"验证码输入有误!\"}");			}//			vcode = null;		}else if(StringUtils.isNotBlank(e.getPassword())){//验证原始密码输入是否正确			logger.error("验证原始密码输入是否正确"+e.getPassword());			Account acc = LoginUserHolder.getLoginAccount();			if(StringUtils.isNotBlank(e.getPassword()) && MD5.md5(e.getPassword()).equals(acc.getPassword())){				return ("{\"ok\":\"原密码输入正确!\"}");			}else{				return ("{\"error\":\"原密码输入有误!\"}");			}		}else if(StringUtils.isNotBlank(phone)){			String fromPage = request.getHeader("Referer");			if(fromPage.contains("register")){				logger.error("验证手机号是否被占用="+phone);				//String tel = e.getTel();				e.clear();				e.setTel(phone);				if (accountService.selectCount(e) > 0){					return ("{\"error\":\"手机号已经被占用!\"}");				}else{					return ("{\"ok\":\"手机号可以使用!\"}");				}			}			logger.error("验证手机号是否已经注册="+phone);			//String tel = e.getTel();			e.clear();			e.setTel(phone);			if (accountService.selectCount(e) > 0){				return ("{\"ok\":\"手机号有效!\"}");			}else{				return ("{\"error\":\"手机号未注册!\"}");			}		}				if(e!=null){			e.clear();		}		return null;	}		/**	 * 查看个人信息	 * @return	 */	@RequestMapping("auth/account/account")	public String account(ModelMap model,HttpServletRequest request){		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		//用户信息（成长值相关信息,积分等）		AccountInfo accountInfo=aboutAccountInfo(Integer.parseInt(acc.getId()));		model.addAttribute("accountInfo", accountInfo);		Download download = new Download();		download.setAccount(acc.getId());		request.getSession().setAttribute("downloadCount",downloadService.selectCount(download));//模板下载数量		Favorite favorite = new Favorite();		favorite.setAccount(acc.getId());		request.getSession().setAttribute("favoriteCount",favoriteService.selectCount(favorite));//模板收藏数量		//订单数量查询		OrderSimpleReport orderSimpleReport = orderService.selectOrdersSimpleReport(acc.getId());		model.addAttribute("orderSimpleReport", orderSimpleReport);		String designerId=null;		Designer d=designerService.selectByAccountId(Integer.parseInt(acc.getId()));		if(d!=null && !StringUtils.isBlank(d.getId()) && Designer.DESIGNER_AUSTA_Y==d.getAuditStatus()){			designerId=d.getId();		}		model.addAttribute("desId", designerId);		/*Map<String, Area> areaMap = SystemManager.getInstance().getAreaMap();		model.addAttribute("provinces", areaMap.values());		if(StringUtils.isNotBlank(e.getProvince()) && areaMap.get(e.getProvince()) != null) {			model.addAttribute("cities", areaMap.get(e.getProvince()).getChildren());		} else {			model.addAttribute("cities", new ArrayList<Area>());		}*/		return "/account/account";	}		/**	 * 修改个人信息	 * @return	 */	@RequestMapping("auth/account/saveSetting")	public String saveSetting(ModelMap model, Account e){		Account account = LoginUserHolder.getLoginAccount();		if (account == null || StringUtils.isBlank(account.getAccount())) {			return toLogin;		}		logger.error("saveSetting.....{}", e);//		logger.error("sex="+sex);		e.setId(account.getId());		accountService.update(e);		if(!account.getNickname().equals(e.getNickname())){			scoreDetailService.addScoreAllOperations(account.getId(),"once_xgnc");		}//		Account acc = (Account) getSession().getAttribute(FrontContainer.USER_INFO);//		acc.setSign(e.getSign());//		acc.setMyself(e.getMyself());//		acc.setSex(e.getSex());				e.clear();		account = accountService.selectById(account.getId());		RequestHolder.getSession().setAttribute(FrontContainer.USER_INFO, account);		RequestHolder.getSession().setAttribute("type", 1);//基本信息		RequestHolder.getSession().setAttribute("status", 1);		return "redirect:/auth/account/info";	}		private boolean requireLogin() throws NullPointerException{		Account account = LoginUserHolder.getLoginAccount();		if (account == null || StringUtils.isBlank(account.getAccount())) {			return true;		}		return false;	}		/**	 * 此方法暂时未被调用	 * 配送地址管理	 * @return	 */	@RequestMapping("auth/account/address")	public String address(ModelMap model, Address address){		Account account = LoginUserHolder.getLoginAccount();		if (account == null || StringUtils.isBlank(account.getAccount())) {			return toLogin;		}//		selectLeftMenu = "address";		address.setAccount(account.getAccount());		List<Address> addressList = addressService.selectList(address);		model.addAttribute("address", address);		model.addAttribute("addressList", addressList);        Map<String, Area> areaMap = SystemManager.getInstance().getAreaMap();		model.addAttribute("provinces", areaMap.values());		List<Area> cities = new ArrayList<Area>();		List<Area> areas = new ArrayList<Area>();		if(StringUtils.isNotBlank(address.getProvince()) && areaMap.get(address.getProvince()) != null) {			cities = areaMap.get(address.getProvince()).getChildren();		}		model.addAttribute("cities", cities);		String area = address.getArea();		for(Area a : cities){			if(a.getCode().equals(area)){				areas = a.getChildren();				break;			}		}		//TODO 缓存的地址只有二级，没有区县		model.addAttribute("areas", areas);		return "/account/address";	}		/**	 * 增加配送地址	 * @return	 */	@RequestMapping("auth/account/saveAddress")	public String saveAddress(ModelMap model, Address address) {		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}//		selectLeftMenu = "address";				//需要将省市区的代号换成中文，插入到pcadetail字段里面去，显示的时候方便。		StringBuilder pcadetail = new StringBuilder();        Map<String, Area> areaMap = SystemManager.getInstance().getAreaMap();		Area sheng = areaMap.get(address.getProvince());//省		pcadetail.append(sheng.getName());				for(int i=0;i<sheng.getChildren().size();i++){			Area shi = sheng.getChildren().get(i);//市			if(shi.getCode().equals(address.getCity())){								pcadetail.append(" ").append(shi.getName());								for(int j = 0;j<shi.getChildren().size();j++){					Area qu = shi.getChildren().get(j);//区					if(qu.getCode().equals(address.getArea())){						pcadetail.append(" ").append(qu.getName());						break;					}				}								break;			}		}				address.setPcadetail(pcadetail.toString());				address.setAccount(acc.getAccount());		if(StringUtils.isBlank(address.getId())){			addressService.insert(address);		}else{			addressService.update(address);		}		address.clear();		return address(model, address);	}		/**	 * 删除指定的配送地址	 * @return	 */	@RequestMapping("auth/account/deleteAddress")	public String deleteAddress(ModelMap model, Address address){		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}//		selectLeftMenu = "address";		String id = address.getId();		if(StringUtils.isBlank(id)){			throw new NullPointerException("id is null!");		}		Address add = new Address();		add.setId(id);		addressService.delete(add);				return address(model, address);	}	/**	 * 编辑指定的配送地址	 * @return	 */	@RequestMapping("auth/account/editAddress")	public String editAddress(ModelMap model, Address address){		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}//		selectLeftMenu = "address";		String id = address.getId();		if(StringUtils.isBlank(id)){			throw new NullPointerException("id is null!");		}		address = addressService.selectById(id);				//获取区域列表		if(StringUtils.isNotBlank(address.getArea())){//			address.getArea()            Map<String, Area> areaMap = SystemManager.getInstance().getAreaMap();			Area area = areaMap.get(address.getProvince());			if(area!=null && area.getChildren()!=null && area.getChildren().size()>0){				for(int i=0;i<area.getChildren().size();i++){					Area city = area.getChildren().get(i);					if(city.getCode().equals(address.getCity())){												logger.error("address.getCity()="+address.getCity());						logger.error(city.toString());						address.setAreaList(city.getChildren());						break;					}				}			}		}				return address(model, address);	}		/**	 * 我的订单列表	 * @return	 * @throws Exception 	 */	@RequestMapping("auth/account/orders")	public String orders(ModelMap model,HttpServletRequest request) throws Exception{		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getId())) {			return toLogin;		}//		getSession().setAttribute(FrontContainer.selectMenu,FrontContainer.not_select_menu);//		selectLeftMenu = "orders";		String type = request.getParameter("type");		Order order=new Order();		order.setAccount(acc.getId());		if(StringUtils.isNotEmpty(type)){			if(type.equals("1")){				order.setStatus(order.status_paysuccess);			}else if(type.equals("2")) {				order.setStatus(order.status_waitforpay);			}		}else{			type="1";			order.setStatus(order.status_paysuccess);		}		request.getSession().setAttribute("type",type);//模板收藏数量		PagerModel pager = getMyOrders(order);		model.addAttribute("pager", pager);		//查询汇总		OrderSimpleReport orderSimpleReport = orderService.selectOrdersSimpleReport(acc.getId());		model.addAttribute("orderSimpleReport", orderSimpleReport);		logger.error("orderSimpleReport="+orderSimpleReport);		return "/account/orders";	}		/**	 * 分页查询订单集合	 * @return	 * @throws Exception	 */	private PagerModel selectMyOrders(Order order) throws Exception {		int offset = 0;		if (RequestHolder.getRequest().getParameter("pager.offset") != null) {			offset = Integer					.parseInt(RequestHolder.getRequest().getParameter("pager.offset"));		}		if (offset < 0)			offset = 0;				PagerModel pager = new PagerModel();		(order).setOffset(offset);		pager = orderService.selectPageList(order);		if(pager==null)pager = new PagerModel();		// 计算总页数		pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)				/ pager.getPageSize());		//		selectListAfter();		pager.setPagerUrl("orders");		pager.setOffset(offset);		return pager;	}	/**	 * 分页获取我的订单列表，首页分页查询订单集合，然后把查询到的ID集合仍到一个多表联合的查询里面，查询出更多的信息。分页显示用户的订单只用一个SQL貌似不好搞的。想到好办法再去优化。	 * @throws Exception	 */	private PagerModel getMyOrders(Order order) throws Exception {		//分页查询订单ID集合//		super.selectList();		//1、分页查询订单集合		PagerModel pager = selectMyOrders(order);		//根据上面查询出来的ID集合，多表联合查询出订单和订单明细数据		List<Order> ordersTemp = pager.getList();		List<String> ids = new LinkedList<String>();		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");		for(int i=0;i<ordersTemp.size();i++){			Order orderItem = ordersTemp.get(i);			//时间转换成可以阅读的格式			orderItem.setCreateTime(DateTimeUtil.getDateTimeString(sdf.parse(orderItem.getCreateTime())));			ids.add(orderItem.getId());			Template template  = templateService.selectById(orderItem.getTemplateId()+"");			if(template!=null && template.getShrinkUrl()!=null) {				orderItem.setPicture(template.getShrinkUrl());			}		}		Order order2 = new Order();		order2.clear();		order2.setAccount(order.getAccount());		order2.setQueryOrderIDs(ids);		//2、查询指定订单集合的所有订单项集合，然后内存中对订单项进行分组		List<Order> myOrders = orderService.selectList(order2);		if(myOrders!=null && myOrders.size()>0){			for(int i=0;i<ordersTemp.size();i++){				Order orderItem = ordersTemp.get(i);				for(Iterator<Order> it = myOrders.iterator();it.hasNext();){					Order orderdetail = it.next();					if(orderdetail.getId().equals(orderItem.getId())){						orderItem.getOrders().add(orderdetail);						it.remove();					}				}			}		}		return pager;	}		/**	 * 转到修改密码	 * @return	 */	@RequestMapping("auth/account/topwd")	public String topwd(ModelMap model, @ModelAttribute("e") Account e){		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		e = accountService.selectById(acc.getId());		model.addAttribute("e", e);//		selectLeftMenu = "topwd";		return "/account/topwd";	}		/**	 * 修改密码	 * @return	 */	@RequestMapping("auth/account/changePwd")	public String changePwd(ModelMap model, @ModelAttribute("e")Account e, RedirectAttributes flushAttrs){		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getId())) {			return toLogin;		}		if (StringUtils.isBlank(e.getNewPassword())				|| StringUtils.isBlank(e.getNewPassword2())				|| StringUtils.isBlank(e.getPassword()) 				|| !e.getNewPassword2().equals(e.getNewPassword())) {			throw new NullPointerException();		}//		getSession().setAttribute(FrontContainer.selectMenu,FrontContainer.not_select_menu);//		selectLeftMenu = "changePwd";//		selectLeftMenu = "topwd";//		logger.error(">>e.getNewPassword() = "+e.getNewPassword());		e.setPassword(MD5.md5(e.getNewPassword()));		e.setId(acc.getId());//		logger.error(">>e.getPassword() = "+e.getPassword());		accountService.update(e);		flushAttrs.addFlashAttribute("errorMsg", "修改密码成功！");		//重新缓存密码数据		acc.setPassword(e.getPassword());				e.clear();		RequestHolder.getSession().setAttribute("type", 3);//修改密码		RequestHolder.getSession().setAttribute("status", 2);		return "redirect:/auth/account/topwd";	}	@RequestMapping("account/changePwdSuccess")	public String changePwdSuccess(){		return "/account/changePwdSuccess";	}	//ajax 修改密码验证，原密码是否正确	@RequestMapping(value="account/changePwdVail",method = RequestMethod.POST)	@ResponseBody	public String changePwdVail(ModelMap model, @ModelAttribute("e")Account e, RedirectAttributes flushAttrs){		Account acc = LoginUserHolder.getLoginAccount();		if(!(StringUtils.isNotBlank(e.getPassword()) && MD5.md5(e.getPassword()).equals(acc.getPassword()))){			return "原密码输入有误!";		}else{			return "success";		}	}//	private void setSelectMenu(String selectID){//		getSession().setAttribute(FrontContainer.selectMenu, selectID);//	}		//	/**//	 * 帮助中心//	 * @return//	 *///	public String help() throws Exception {//		logger.error("this.helpCode="+this.helpCode);//		if(StringUtils.isBlank(this.helpCode)){//			throw new NullPointerException("helpCode参数不能为空");//		}else if(this.helpCode.equals("index")){//			return "help";//		}else{//			News newsParam = new News();//			newsParam.setCode(helpCode);//			news = newsService.selectSimpleOne(newsParam);//			if(news==null){//				throw new NullPointerException("根据code查询不到文章！");//			}//			//			String url = "/jsp/helps/"+news.getId()+".jsp";//			logger.error("url = " + url);//			getRequest().setAttribute("newsInfoUrl",url);//			//			return "help";//			////			logger.error("SystemManager.newsMap="+SystemManager.newsMap);////			news = SystemManager.newsMap.get(this.helpCode);//newsService.selectById(String.valueOf(helpID));////			if(news==null){////				throw new NullPointerException("根据code查询不到文章！");////			}//		}////		return "help";//	}		/**	 * 此方法暂时未被调用	 * 设置选中的	 * @return	 */	@RequestMapping("account/setAddressDefault")	@ResponseBody	public String setAddressDefault(ModelMap model, Address e){		String id = e.getId();		if(StringUtils.isBlank(id)){			throw new NullPointerException("默认地址ID不能为空！");		}				Account account = LoginUserHolder.getLoginAccount();		if(account==null || StringUtils.isBlank(account.getAccount())){			throw new NullPointerException("账号不能为空！");		}		Address address = new Address();		address.setId(id);		address.setIsdefault("y");		address.setAccount(account.getAccount());		addressService.setAddressDefault(address);		return "{\"success\":0}";	}		/**	 * 根据省份编码获取城市列表	 * @return	 * @throws IOException 	 */	@RequestMapping("account/selectCitysByProvinceCode")	@ResponseBody	public String selectCitysByProvinceCode() throws IOException{		logger.error("selectCitysByProvinceCode...");		String provinceCode = RequestHolder.getRequest().getParameter("provinceCode");		logger.error("selectCitysByProvinceCode...provinceCode="+provinceCode);		if(StringUtils.isBlank(provinceCode)){			throw new NullPointerException("provinceCode is null");		}		//		Area area = new Area();//		area.setCode(provinceCode);        Map<String, Area> areaMap = SystemManager.getInstance().getAreaMap();		if(areaMap!=null && areaMap.size()>0){			Area areaInfo = areaMap.get(provinceCode);						logger.error("areaInfo = " + areaInfo);						if(areaInfo!=null && areaInfo.getChildren()!=null && areaInfo.getChildren().size()>0){				String jsonStr = JSON.toJSONString(areaInfo.getChildren());				logger.error("jsonStr=" + jsonStr);				return (jsonStr);			}		}				return ("{}");	}	/**	 * 根据城市编码获取区域列表	 * @return	 * @throws IOException 	 */	@RequestMapping("account/selectAreaListByCityCode")	@ResponseBody	public String selectAreaListByCityCode() throws IOException{		logger.error("selectAreaListByCityCode...");		String provinceCode = RequestHolder.getRequest().getParameter("provinceCode");		String cityCode = RequestHolder.getRequest().getParameter("cityCode");		logger.error("selectAreaListByCityCode...provinceCode="+provinceCode+",cityCode="+cityCode);		if(StringUtils.isBlank(provinceCode) || StringUtils.isBlank(cityCode)){			throw new NullPointerException("provinceCode or cityCode is null");		}        Map<String, Area> areaMap = SystemManager.getInstance().getAreaMap();		if(areaMap!=null && areaMap.size()>0){			Area city = areaMap.get(provinceCode);						logger.error("areaInfo = " + city);						if(city!=null && city.getChildren()!=null && city.getChildren().size()>0){				for(int i=0;i<city.getChildren().size();i++){					Area item = city.getChildren().get(i);					if(item.getCode().equals(cityCode)){						if(item.getChildren()!=null && item.getChildren().size()>0){							String jsonStr = JSON.toJSONString(item.getChildren());							logger.error("jsonStr=" + jsonStr);							return (jsonStr);						}					}				}			}		}				return ("{}");	}	/**	 * 用户使用邮件重置密码	 * @return	 */	@RequestMapping("account/reset")	public String reset(ModelMap model,@ModelAttribute("e") Account account){		checkSendEmail(model, account);		return "/account/reset";	}		/**	 * 系统发出邮件后，用户访问邮件中的URL地址，此方法检查该地址的有效性和时间的有效性	 */	private Email checkSendEmail(ModelMap model, Account account){		String sign = RequestHolder.getRequest().getParameter("sign");		if(StringUtils.isBlank(sign)){			throw new NullPointerException("参数非法!");		}				//查询邮件是否是本系统所发出的		Email email = new Email();		email.setSign(sign);		email = emailService.selectOne(email);		if(email==null){			throw new NullPointerException("非法请求！");		}				if(email.getStatus().equals(email.email_status_y)){			model.addAttribute(FrontContainer.reset_password_email_timeout, "当前连接已失效！");			return null;		}		//		String email_id = email.getId();				account.setEmail(email.getAccount());		//检查此邮件是否过期		long time1 = Long.valueOf(email.getStarttime());		long time2 = new Date().getTime();		long time3 = Long.valueOf(email.getEndtime());		if (time2 > time1 && time2 < time3) {			//更新邮件状态为已失效			Email email2 = new Email();			email2.setStatus(email.email_status_y);			email2.setId(email.getId());			emailService.update(email2);						//允许修改密码			return email;		}else{			logger.error("邮件已过期！");			model.addAttribute(FrontContainer.reset_password_email_timeout, "当前连接已失效！");		}		return null;	}		/**	 * 通过邮件重置密码	 * @return	 * @throws IOException 	 */	@RequestMapping("account/doReset")	public String doReset(ModelMap model, Account e) throws IOException{		logger.error("doReset...");		if(StringUtils.isBlank(e.getEmail()) || StringUtils.isBlank(e.getPassword()) || StringUtils.isBlank(e.getPassword2())){			throw new NullPointerException("请求非法！");		}				if(!e.getPassword().equals(e.getPassword2())){//			getRequest().setAttribute(FrontContainer.show_user_option_error, "两次输入的密码不一致！");			throw new RuntimeException("两次输入的密码不一致！");		}		logger.error("doReset...e.getPassword() = "+e.getPassword());		Account acc = new Account();		acc.setEmail(e.getEmail());		acc=accountService.selectOne(acc);		acc.setPassword(MD5.md5(e.getPassword()));		accountService.update(acc);		RequestHolder.getSession().setAttribute("resetType","mail");		return "redirect:/account/resetSuccess";//		return "resetSuccess";	}	@RequestMapping("account/resetSuccess")	public String resetSuccess(){		return "/account/resetSuccess";	}		/**	 * 转到修改邮箱页面	 * @return	 */	@RequestMapping("auth/account/changeEmail")	public String changeEmail(){		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLoginRedirect;		}		return "/account/changeEmail";	}		/**	 * 修改邮箱	 * @return	 * @throws Exception 	 */	@RequestMapping("auth/account/doChangeEmail")	public String doChangeEmail(Account e) throws Exception{		logger.error("e.getNewEmail() = "+e.getNewEmail());		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}				logger.error("doChangeEmail..");//		if(!TokenUtil.getInstance().isTokenValid(getRequest())){//			throw new Exception("表单重复提交了！");//		}		e.setId(acc.getId());		if(StringUtils.isBlank(e.getPassword()) || StringUtils.isBlank(e.getNewEmail())){			throw new NullPointerException("非法请求！");		}		//		Account acc = (Account)getSession().getAttribute(FrontContainer.USER_INFO);		if(!MD5.md5(e.getPassword()).equals(acc.getPassword())){			//前台AJAX检查密码出问题了，后台来处理前端的不足			throw new RuntimeException("出现错误，请联系系统管理员！");		}				//发送邮件到指定邮箱。		acc.setNewEmail(e.getNewEmail());		accountService.sendEmail(acc,NotifyTemplate.email_change_email);		acc.setNewEmail(null);		return "redirect:/account/changeEmailWait.html";	}	@RequestMapping("account/changeEmailWait")	public String changeEmailWait(){		logger.error("changeEamilWait..");		return "account/changeEmailWait";	}		/**	 * 修改邮箱时调用此方法，暂未被使用	 * 修改邮箱--->用户登陆邮箱后点击邮件---->激活邮箱---->调用此方法	 * @return	 */	@RequestMapping("account/active")	public String active(ModelMap model, Account account){		logger.error("active...");//		selectLeftMenu = "user";				String sign = RequestHolder.getRequest().getParameter("sign");//		String type = getRequest().getParameter("type"); 		if(StringUtils.isBlank(sign)){			throw new NullPointerException("非法请求！");		}		Email email = checkSendEmail(model, account);		if(email!=null){			Account acc = new Account();			acc.setEmail(email.getNewEmail());			acc.setAccount(email.getAccount());			accountService.updateEmailByAccount(acc);						//修改邮箱成功后，更新session缓存中数据			acc = LoginUserHolder.getLoginAccount();			if (acc != null && StringUtils.isNotBlank(acc.getAccount())) {				acc.setEmail(email.getNewEmail());			}						email = new Email();			email.setStatus(email.email_status_n);			email.setPageMsg("恭喜：新邮箱已激活！");			model.addAttribute(FrontContainer.reset_password_email_timeout, email);		}else{			email = new Email();			email.setStatus(email.email_status_y);			email.setPageMsg("当前连接已失效！");			model.addAttribute(FrontContainer.reset_password_email_timeout, email);		}		return "/account/active";	}	/**	 * 激活账号的邮件的回调	 * @return	 */	@RequestMapping("account/activeAccount")	public String activeAccount(HttpServletRequest request){		logger.error("active...");		String sign = request.getParameter("sign");		if(StringUtils.isBlank(sign)){			throw new NullPointerException("非法请求！");		}				//查询邮件是否是本系统所发出的		Email email = new Email();		email.setSign(sign);		email = emailService.selectOne(email);		if(email==null){			throw new NullPointerException("非法请求！");		}				if(email.getStatus().equals(Email.email_status_y)){			request.setAttribute("LinkInvalid", "链接已失效！");			return "/account/reg_success_active_result";		}				Account acc = new Account();		acc.setEmail(email.getAccount());		acc = accountService.selectOne(acc);		if(acc==null){			throw new NullPointerException("非法请求！"); 		}				Account account = accountService.selectById(acc.getId());		account.setId(acc.getId());		account.setEmailIsActive(Account.account_emailIsActive_y);		account=DateTimeUtil.giveVipWhenReg(account);		accountService.updateDataWhenActiveAccount(account,acc.getEmail());		RequestHolder.getSession().setAttribute(FrontContainer.USER_INFO, account);		RequestHolder.getSession().setAttribute("regType","mail");		return "/account/reg_success_active_result";	}	//随机生成nickname，要求唯一	public String genareteNickname(){		Account acc=new Account();		String nickName=null;		int queryResult=1;		while(queryResult!=0){			nickName="ym-"+(int)((Math.random()*9+1)*100000);			acc.setNickname(nickName);			queryResult=accountService.selectCount(acc);		}		System.out.println(nickName+"-------------------------");		return nickName;	}	/**	 * 分页查询模板管理	 * @return	 * @throws Exception	 */	@RequestMapping("auth/account/templateManage")	public String templateManage(ModelMap model,HttpServletRequest request) throws Exception{		Account acc =  LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		Template template = new Template();		//template.setAuthor(String.valueOf(111));		template.setAuthor(String.valueOf(acc.getId()));		/*String type=request.getParameter("type");		if("2".equals(type)){			template.setCatalogID("121");//AE		}else if("3".equals(type)){			template.setCatalogID("125");//表情包		}*/		template.setOrderBy(4);//按上传时间降序		PagerModel pager = selectPagerTemplateManageList(template);		pager.setPagerUrl("templateManage");		model.addAttribute("pager", pager);		//model.addAttribute("type", type);		return "/account/templateManage";	}	private PagerModel selectPagerTemplateManageList(Template template){		int offset = 0;//分页偏移量		String pagerOffset = RequestHolder.getRequest().getParameter("pager.offset");		if (StringUtils.isNotBlank(pagerOffset)) {			offset = Integer.parseInt(pagerOffset);		}		if (offset < 0)			offset = 0;		template.setOffset(offset);		PagerModel servicesPager = templateService.queryTemplateUploadList(template);		servicesPager.setOffset(offset);		if(servicesPager==null)servicesPager = new PagerModel();		// 计算总页数		servicesPager.setPagerSize((servicesPager.getTotal() + servicesPager.getPageSize() - 1)				/ servicesPager.getPageSize());		return servicesPager;	}	//根据邮箱后缀名获得相应邮箱登录地址	public String getEmailURL(String email){		String address=email.substring(email.indexOf("@"));		InputStream propertiesInput = Thread.currentThread().getContextClassLoader().getResourceAsStream("emailURL.properties");		Properties properties = new Properties();		try {			properties.load(propertiesInput);		} catch (IOException e) {			e.printStackTrace();		}		if(address.contains("qq")){			return properties.getProperty("qq");		}		if(address.contains("aliyun")){			return properties.getProperty("aliyun");		}		if(address.contains("163")||address.contains("126")||address.contains("yeah")){			return properties.getProperty("wangyi");		}		if(address.contains("sohu")){			return properties.getProperty("sohu");		}		if(address.contains("sina")){			return properties.getProperty("sina");		}		if(address.contains("tom")){			return properties.getProperty("tom");		}		if(address.contains("21cn")){			return properties.getProperty("21cn");		}		if(address.contains("foxmail")){			return properties.getProperty("foxmail");		}		if(address.contains("vip.163")){			return properties.getProperty("vip163");		}		if(address.contains("outlook")){			return properties.getProperty("outlook");		}		if(address.contains("189")){			return properties.getProperty("189");		}		if(address.contains("139")){			return properties.getProperty("139");		}		if(address.contains("263")){			return properties.getProperty("263");		}		if(address.contains("hotmail")){			return properties.getProperty("hotmail");		}		if(address.contains("yahoo")){			return properties.getProperty("yahoo");		}		if(address.contains("netease")){			return properties.getProperty("netease");		}		if(address.contains("wo")){			return properties.getProperty("wo");		}		if(address.contains("tianya")||address.contains("hainan")){			return properties.getProperty("tianya");		}		if(address.contains("zoho")){			return properties.getProperty("zoho");		}		if(address.contains("56")){			return properties.getProperty("56");		}		return "1";//不是常见邮箱，不提供跳转	}	/**	 * 更换头像	 * @return	 *	 */	@RequestMapping(value="auth/account/changeAvater",method = RequestMethod.POST)	@ResponseBody	public String changeAvater(ModelMap model, RedirectAttributes flushAttrs){		Account account = LoginUserHolder.getLoginAccount();		if (account == null || StringUtils.isBlank(account.getAccount())) {			return toLogin;		}		try{			String avater =RequestHolder.getRequest().getParameter("avater");			Account e=new Account();			e.setAvater(avater);			e.setId(account.getId());			accountService.updateAvaterByAccount(e);			scoreDetailService.addScoreAllOperations(e.getId(),"once_xgtx");			e.clear();			account = accountService.selectById(account.getId());			RequestHolder.getSession().setAttribute(FrontContainer.USER_INFO, account);			return "success";		}catch(Exception e){			logger.error("更新头像失败");			return "fail";		}	}	/**	 * 分页查询模板下载列表	 * @return	 * @throws Exception	 */	@RequestMapping("auth/account/download")	public String download(ModelMap model,HttpServletRequest request) throws Exception{		Account acc = (Account) LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getId())) {			return toLogin;		}		Download download = new Download();		download.setAccount(acc.getId());		PagerModel pager = selectPagerDownloadList(download);		pager.setPagerUrl("download");		request.getSession().setAttribute("downloadCount",downloadService.selectCount(download));		if(pager!=null && pager.getList()!=null && pager.getList().size()>0){			List<String> templateIds = new LinkedList<String>();			for(int i=0;i<pager.getList().size();i++){				Download dl = (Download)pager.getList().get(i);				templateIds.add(dl.getProductID());			}			//根君商品ID集合加载商品信息：名称、价格、销量、是否上下架等			Template p = new Template();			p.setTemplateIds(templateIds);			List<Template> templateList = templateService.selectTemplateListByIds(p);			//将查询出来的每一个商品对象挂到收藏夹对象上去			if(templateList!=null && templateList.size()>0){				for(int i=0;i<pager.getList().size();i++){					Download dl = (Download) pager.getList().get(i);					dl.setTemplate(null);					for(int j=0;j<templateList.size();j++){						Template template = templateList.get(j);						if(dl.getProductID().equals(template.getId())){							dl.setTemplate(template);							break;						}					}					if(dl.getTemplate() == null){						//TODO 产品已经不存在					}				}			}		}		model.addAttribute("pager", pager);		return "/account/download";	}	private PagerModel selectPagerDownloadList(Download download){		int offset = 0;		String pagerOffset = RequestHolder.getRequest().getParameter("pager.offset");		if (StringUtils.isNotBlank(pagerOffset)) {			offset = Integer.parseInt(pagerOffset);		}		if (offset < 0)			offset = 0;		download.setOffset(offset);		PagerModel servicesPager = downloadService.selectPageList(download);		if(servicesPager==null)servicesPager = new PagerModel();		// 计算总页数		servicesPager.setPagerSize((servicesPager.getTotal() + servicesPager.getPageSize() - 1)				/ servicesPager.getPageSize());		servicesPager.setOffset(offset);		return servicesPager;	}	/**	 * 转到修改头像	 * @return	 */	@RequestMapping("auth/account/avatar")	public String avatar(ModelMap model, @ModelAttribute("e") Account e){		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		e = accountService.selectById(acc.getId());		model.addAttribute("e", e);		return "/account/avatar";	}	/**	 * 转到基本信息	 * @return	 */	@RequestMapping("auth/account/info")	public String info(ModelMap model, @ModelAttribute("e") Account e){		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		e = accountService.selectById(acc.getId());		model.addAttribute("e", e);		Map<String, Area> areaMap = SystemManager.getInstance().getAreaMap();		model.addAttribute("provinces", areaMap.values());		if(StringUtils.isNotBlank(e.getProvince()) && areaMap.get(e.getProvince()) != null) {			model.addAttribute("cities", areaMap.get(e.getProvince()).getChildren());		} else {			model.addAttribute("cities", new ArrayList<Area>());		}		return "/account/info";	}	/**	 * 单点退出	 * @param session	 * @return	 */	@RequestMapping("/account/cas/logout")	public String casLogout(HttpSession session) {		session.invalidate();		return "redirect:"+casServerUrlPrefix+"/logout?service="+webUrl+"/index";	}	/**	 * 未受保护资源获得用户信息	 * @param request	 * @return	 * @author emily.lee	 * @date 2017-10-13	 */	@RequestMapping("/auth/cas")	public String redirectAuth(HttpServletRequest request){		try {			String re = request.getSession().getAttribute("authRrl").toString();			return "redirect:"+re;		}catch (Exception e){			e.printStackTrace();			return "redirect:/index";		}	}	/**	 * 转到我的积分	 * @param model	 * @param e	 * @return	 */	@RequestMapping("auth/account/score")	public String score(ModelMap model, @ModelAttribute("e") Account e){		Account acc = LoginUserHolder.getLoginAccount();		if (LoginUserHolder.getLoginAccount() == null) {			return toLoginRedirect;		}		//用户信息（成长值，等级头衔等）		AccountInfo accountInfo=aboutAccountInfo(Integer.parseInt(acc.getId()));		model.addAttribute("accountInfo", accountInfo);		//每日任务		ScoreTask dailyScoreTask=new ScoreTask();		dailyScoreTask.setType(dailyScoreTask.scoreTask_daily);		List<ScoreTask> dailyScoreTasks=scoreTaskService.selectList(dailyScoreTask);		Set<String> keys=redisCacheProvider.getKeys("scoreTask_"+acc.getId()+"_"+dailyScoreTask.scoreTask_daily);		for (String k : keys) {			for(int i=0;i<dailyScoreTasks.size();i++){				String flag=k.replace("scoreTask_"+acc.getId()+"_"+dailyScoreTask.scoreTask_daily+"_","");				if(dailyScoreTasks.get(i).getFlag().equals(flag)){					dailyScoreTasks.get(i).setStatus(1);//设置状态为已完成				}			}		}		model.addAttribute("dailyScoreTasks", dailyScoreTasks);		//成长任务（多次）		ScoreTask timesScoreTask=new ScoreTask();		timesScoreTask.setType(timesScoreTask.scoreTask_times);		List<ScoreTask> timesScoreTasks=scoreTaskService.selectList(timesScoreTask);		Set<String> timesKeys=redisCacheProvider.getKeys("scoreTask_"+acc.getId()+"_"+timesScoreTask.scoreTask_times);		for (String k : timesKeys) {			for(int i=0;i<timesScoreTasks.size();i++){				String flag=k.replace("scoreTask_"+acc.getId()+"_"+timesScoreTask.scoreTask_times+"_","");				if(timesScoreTasks.get(i).getFlag().equals(flag)){					int completionTimes=Integer.parseInt(redisCacheProvider.get(k).toString());					timesScoreTasks.get(i).setCompletionTimes(completionTimes);					if(timesScoreTasks.get(i).getTimes()<=completionTimes){						timesScoreTasks.get(i).setStatus(1);					}				}			}		}		model.addAttribute("timesScoreTasks", timesScoreTasks);		//成长任务（一次）		ScoreTask onceScoreTask=new ScoreTask();		onceScoreTask.setType(onceScoreTask.scoreTask_once);		List<ScoreTask> onceScoreTasks=scoreTaskService.selectList(onceScoreTask);		ScoreDetail scoreDetail=new ScoreDetail();		scoreDetail.setAccount(acc.getId());		for(int i=0;i<onceScoreTasks.size();i++){			if("once_zc".equals(onceScoreTasks.get(i).getFlag())){				onceScoreTasks.get(i).setStatus(1);			}else if("once_xgnc".equals(onceScoreTasks.get(i).getFlag())){				if(accountInfo.getNicknameChange()==1){					onceScoreTasks.get(i).setStatus(1);				}			}else if("once_xgtx".equals(onceScoreTasks.get(i).getFlag())){				if(accountInfo.getAvaterChange()==1){					onceScoreTasks.get(i).setStatus(1);				}			}else{				scoreDetail.setTaskid(onceScoreTasks.get(i).getId());				ScoreDetail scoreDetail2=scoreDetailService.selectOne(scoreDetail);				if(scoreDetail2!=null){					onceScoreTasks.get(i).setStatus(1);				}			}		}		//判断是否为设计师，是设计师添加设计师主页的链接		String designerId=null;		Designer d=designerService.selectByAccountId(Integer.parseInt(acc.getId()));		if(d!=null && !StringUtils.isBlank(d.getId()) && Designer.DESIGNER_AUSTA_Y==d.getAuditStatus()){			designerId=d.getId();		}		model.addAttribute("desId", designerId);		model.addAttribute("onceScoreTasks", onceScoreTasks);		return "/account/score";	}	public  AccountInfo aboutAccountInfo(int accid){		AccountInfo accountInfo=new AccountInfo();		accountInfo.setAccountId(accid);		accountInfo=accountInfoService.selectAccountInfo(accountInfo);		List<AccountLevel> accountLevel=systemManager.getAccountLevelList();		List<AccountRank> accountRank=systemManager.getAccountRankList();		if(accountInfo.getGrowthValue()<=accountLevel.get(0).getMinvalues()){			accountInfo.setLevel(accountLevel.get(0).getLevel());			accountInfo.setMaxvalues(accountLevel.get(0).getMaxvalues()+1);		}else if(accountInfo.getGrowthValue()>=accountLevel.get(accountLevel.size()-1).getMaxvalues()){			accountInfo.setLevel(accountLevel.get(accountLevel.size()-1).getLevel());			accountInfo.setMaxvalues(accountLevel.get(accountLevel.size()-1).getMaxvalues()+1);		}else{			for(int i=0; i<accountLevel.size(); i++){				if(accountInfo.getGrowthValue()>=accountLevel.get(i).getMinvalues() && accountInfo.getGrowthValue()<=accountLevel.get(i).getMaxvalues()){					accountInfo.setLevel(accountLevel.get(i).getLevel());					accountInfo.setMaxvalues(accountLevel.get(i).getMaxvalues()+1);					break;				}			}		}		if(accountInfo.getGrowthValue()<=accountRank.get(0).getMinvalues()){			accountInfo.setRank(accountRank.get(0).getRank());			accountInfo.setRankImg(accountRank.get(0).getRankImg());		}else if(accountInfo.getGrowthValue()>=accountRank.get(accountRank.size()-1).getMaxvalues()){			accountInfo.setRank(accountRank.get(accountRank.size()-1).getRank());			accountInfo.setRankImg(accountRank.get(accountRank.size()-1).getRankImg());		}else{			for(int i=0; i<accountRank.size(); i++){				if(accountInfo.getGrowthValue()>=accountRank.get(i).getMinvalues() && accountInfo.getGrowthValue()<=accountRank.get(i).getMaxvalues()){					accountInfo.setRank(accountRank.get(i).getRank());					accountInfo.setRankImg(accountRank.get(i).getRankImg());					break;				}			}		}		return accountInfo;	}	/**	 *	 * 每日签到	 * @return	 * @throws IOException	 */	@RequestMapping("/auth/account/dailyCheck")	public String dailyCheck(ModelMap model,HttpServletRequest request) throws IOException{		Account acc = LoginUserHolder.getLoginAccount();		scoreDetailService.addScoreAllOperations(acc.getId(),"daily_mrqd");		return "redirect:/auth/account/score";	}	/*会员每日抽奖活动*/	@RequestMapping("auth/account/lottery")	@ResponseBody	public String lottery(HttpServletRequest request){		Account acc=LoginUserHolder.getLoginAccount();		TAccount tAccount=tAccountExtMapper.selectByPrimaryKey(Integer.parseInt(acc.getId()));		Date vipdate=tAccount.getVipdate();		//String vipdate=acc.getVipDate();		Result result=new Result();		Prize prize=new Prize();		prize.setAccount(acc.getId());		if (vipdate != null){			acc.setVipDate(sdf.format(vipdate));		}		if (tAccount.getYoudian() !=null){			acc.setYoudian(tAccount.getYoudian());		}else{			acc.setYoudian(0);		}		prize.setGetPrizeDate(new SimpleDateFormat("yyyy-MM-dd 00:00:00").format(new Date()));		//非会员或已过期			if(vipdate==null || vipdate.before(new Date())){                result.setMsg("抱歉，您还不是会员");            //当日已抽过奖            }else if(prizeService.selectTodayPrize(prize)!=null){				result.setMsg("抱歉，您今日已经抽过");			} else{                Random random=new Random();                Double probability=random.nextDouble();                result=probability(probability,acc);            }		return result.toString();	}	public  Result probability(Double probability,Account acc){		Result result=null;		//1%概率-会员+3天		if(probability<=0.01){			result=new Result(3,"会员体验+3天",291);		//5%概率-会员+1天		}else if(probability<=0.06){			result=new Result(1,"会员体验+1天",24);		//10%概率-柚点+10		}else if(probability<=0.16){			result=new Result(10,"10柚点",336);		//15%概率-柚点+8		}else if(probability<=0.31){			result=new Result(8,"8柚点",202);		//20%概率-积分+50		}else if(probability<=0.51){			result=new Result(50,"50积分",114.3);		//积分+20		}else{			result=new Result(20,"20积分",158.3);		}		deliverPrize(result,acc);		return result;	}	/*发放奖品*/	public void deliverPrize(Result result,Account acc){		String msg=result.getMsg();		Prize prize=new Prize();		prize.setAccount(acc.getId());		prize.setPrize(result.getMsg());		if(msg.contains("会员")){			Date startDate= null;			try {				startDate = sdf.parse(acc.getVipDate());			} catch (ParseException e) {				e.printStackTrace();			}			int addVipDate=result.getCode();			acc.setVipDate(sdf.format(org.apache.commons.lang.time.DateUtils.addDays(startDate,addVipDate)));		}else if(msg.contains("柚点")){			acc.setYoudian(acc.getYoudian()+result.getCode());		}else if(msg.contains("积分")){			AccountInfo accountInfo=new AccountInfo();			accountInfo.setAccountId(Integer.parseInt(acc.getId()));			accountInfo=accountInfoService.select(accountInfo);			accountInfo.setScore(accountInfo.getScore()+result.getCode());			accountInfoService.updateScore(accountInfo);			acc.setScore(acc.getScore()+result.getCode());		}		accountService.update(acc);		RequestHolder.getSession().setAttribute(FrontContainer.USER_INFO, acc);		prizeService.insert(prize);	}	//我的定制-我是用户	@RequestMapping("/auth/account/customizations/imuser")	public String customizeIMuser(ModelMap model,HttpServletRequest request){		int offset = 0;//分页偏移量		String pagerOffset = RequestHolder.getRequest().getParameter("pager.offset");		if (StringUtils.isNotBlank(pagerOffset)) {			offset = Integer.parseInt(pagerOffset);		}		if (offset < 0) {			offset = 0;		}		Account acc=LoginUserHolder.getLoginAccount();		CustomizeOrder co=new CustomizeOrder();		//co.setPageSize(3);		co.setOffset(offset);		co.setId(acc.getId());		co.setPageSize(10);		PagerModel pager=customizeOrderService.userOrders(co);		pager.setPageSize(10);		pager.setOffset(offset);		Integer designerPageListCount=customizeOrderService.designerPageListCount(acc.getId());		//pager.setPageSize(3);		if(pager!=null){			// 计算总页数（每页展示数量pageSize默认值为10）			pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)					/ pager.getPageSize());			pager.setPagerUrl("imuser");		}		model.addAttribute("imDesignerCount",designerPageListCount);		model.addAttribute("pager",pager);		model.addAttribute("now",new Date());		return "/account/customizations";	}	@RequestMapping("/auth/account/tempUploadIntroduce")	public String kkk(ModelMap model, @ModelAttribute("e") Template t, HttpServletRequest request) throws Exception {		Account acc=LoginUserHolder.getLoginAccount();		Designer d=designerService.selectByAccountId(Integer.parseInt(acc.getId()));		String isDesigner="n";		if(d==null || StringUtils.isBlank(d.getId())|| Designer.DESIGNER_AUSTA_Y != d.getAuditStatus()){			isDesigner="n";		}else{			isDesigner="y";		}		model.addAttribute("isDesigner",isDesigner);		return "account/tempUploadIntroduce";	}	//我的收入	@RequestMapping("/auth/account/income")	public String income(ModelMap model,HttpServletRequest request){		Account acc = LoginUserHolder.getLoginAccount();		//累计收入、我的钱包、作品销量、定制销量		String allIncome=orderService.selectAllIncomeByAccount(Integer.parseInt(acc.getId()));		BigDecimal wallet=new BigDecimal("0");		if(allIncome!=null){			BigDecimal income=new BigDecimal(allIncome);			BigDecimal allenchashment=enchashmentRecordService.selectAllEnchashmentByAccount(Integer.parseInt(acc.getId()));			wallet = income.subtract(allenchashment);		}		int templateCount=orderService.selectTemplateSalesCount(Integer.parseInt(acc.getId()));		int customizeCount=orderService.selectCustomizeSalesCount(Integer.parseInt(acc.getId()));		//收入明细		PagerModel pager1=new PagerModel();		pager1.setPageSize(5);		pager1.setTotal(orderService.selectIncomePageCount(Integer.parseInt(acc.getId())));		pager1.setPagerSize((pager1.getTotal() + pager1.getPageSize() - 1)/ pager1.getPageSize());		//提现记录		PagerModel pager2=new PagerModel();		pager2.setPageSize(5);		pager2.setTotal(enchashmentRecordService.selectPageCount(Integer.parseInt(acc.getId())));		pager2.setPagerSize((pager2.getTotal() + pager2.getPageSize() - 1)/ pager2.getPageSize());		//提现按钮状态		int status=0;//提现金额低于200		if(!(new BigDecimal("200").compareTo(wallet)==1)){			ApplyEnchashment a=applyEnchashmentService.selectRecentApplyByAccId(acc.getId());			if(a!=null && StringUtils.isNotBlank(a.getId())){				status=2;//正在申请中			}else{				status=1;//申请按钮可用			}		}		//收入明细：时间、模板、收入		model.addAttribute("wallet",wallet);//我的钱包		model.addAttribute("allIncome",allIncome);//累计收入		model.addAttribute("templateCount",templateCount);//作品销量		model.addAttribute("customizeCount",customizeCount);//定制销量		model.addAttribute("pager1", pager1);//收入明细		model.addAttribute("pager2", pager2);//提现明细		model.addAttribute("status", status);//提现按钮状态		return "/account/income";	}	/*//提现操作	@RequestMapping(value="/auth/account/enchashment",method = RequestMethod.POST)	@ResponseBody	public synchronized String enchashment(ModelMap modeles, EnchashmentRecord enchashmentRecord){		Account acc = LoginUserHolder.getLoginAccount();			enchashmentRecord.setAccountId(Integer.parseInt(acc.getId()));			String no=redisCacheProvider.numberGenerator("E");//("E"代表提现操作）			enchashmentRecord.setNo(no);			int flag=enchashmentRecordService.enchashment(enchashmentRecord);			if(flag==1){				BankAccount b=new BankAccount();				b.setAccountId(enchashmentRecord.getAccountId());				b.setBankAccount(enchashmentRecord.getAlipayAccount());				b.setBankName("支付宝");				bankAccountService.insert(b);				return "success";			}else{				return "fail";			}	}*/	@RequestMapping(value="/auth/account/applyEnchashment",method = RequestMethod.POST)	public String applyEnchashment(ModelMap model, HttpServletRequest request){		int status=0;		try{			Account acc = LoginUserHolder.getLoginAccount();			//累计收入、我的钱包、作品销量、定制销量			String allIncome=orderService.selectAllIncomeByAccount(Integer.parseInt(acc.getId()));			BigDecimal wallet=new BigDecimal("0");			if(allIncome!=null){				BigDecimal income=new BigDecimal(allIncome);				BigDecimal allenchashment=enchashmentRecordService.selectAllEnchashmentByAccount(Integer.parseInt(acc.getId()));				wallet = income.subtract(allenchashment);			}			if(new BigDecimal("200").compareTo(wallet)==1){				status=2;			}else{				String bankAccountId=request.getParameter("chooseAccount");				BankAccount bankAccount=bankAccountService.selectById(bankAccountId);				if(StringUtils.isBlank(bankAccount.getBankAccount())){					throw new NullPointerException();				}				ApplyEnchashment a=new ApplyEnchashment();				a.setAccountId(Integer.parseInt(acc.getId()));				a.setAmount(wallet);				a.setAlipayAccount(bankAccount.getBankAccount());				a.setApplyTime(new Date());				applyEnchashmentService.insert(a);				status=1;			}			model.addAttribute("status", status);//是否存在可选择的支付宝账号			return "/paygate/withdrawCash/chooseAccount";		}catch (Exception e){			logger.error("提现申请失败。");			model.addAttribute("status", status);//是否存在可选择的支付宝账号			return "/paygate/withdrawCash/chooseAccount";		}	}	//我的收入分页	@RequestMapping("/auth/account/incomePage")	@ResponseBody	public JSONObject incomePage(HttpServletRequest request) throws Exception{		int offset=0;		String pagerOffset = request.getParameter("offset");		if (StringUtils.isNotBlank(pagerOffset)) {			offset = Integer.parseInt(pagerOffset);		}		if (offset < 0) {			offset = 0;		}		Account acc=LoginUserHolder.getLoginAccount();		Order o=new Order();		o.setAccount(acc.getId());		o.setOffset(offset);		o.setPageSize(5);		JSONObject result=orderService.selectIncomeList(o);		return result;	}	//提现记录分页	@RequestMapping("/auth/account/enchashmentPage")	@ResponseBody	public JSONObject enchashmentPage(HttpServletRequest request) throws Exception{		int offset=0;		String pagerOffset = request.getParameter("offset");		if (StringUtils.isNotBlank(pagerOffset)) {			offset = Integer.parseInt(pagerOffset);		}		if (offset < 0) {			offset = 0;		}		Account acc=LoginUserHolder.getLoginAccount();		EnchashmentRecord enchashmentRecord=new EnchashmentRecord();		enchashmentRecord.setAccountId(Integer.parseInt(acc.getId()));		enchashmentRecord.setOffset(offset);		enchashmentRecord.setPageSize(5);		JSONObject result=enchashmentRecordService.selectEnchashmentList(enchashmentRecord);		return result;	}	//添加提现账号页面	@RequestMapping("/auth/account/addAcount")	public String addAcount(ModelMap model,HttpServletRequest request){		Account account = LoginUserHolder.getLoginAccount();		BankAccount bankAccount=new BankAccount();		bankAccount.setAccountId(Integer.parseInt(account.getId()));		List<BankAccount> list=bankAccountService.selectList(bankAccount);		String exist="n";		if(list!=null && list.size()>0){			exist="y";		}		model.addAttribute("exist", exist);//是否存在可选择的支付宝账号		return "/paygate/withdrawCash/addAccount";	}	//申请提现，选择账号页面	@RequestMapping("/auth/account/chooseAccount")	public String chooseBankAccount(ModelMap model,HttpServletRequest request){		Account account = LoginUserHolder.getLoginAccount();		BankAccount bankAccount=new BankAccount();		bankAccount.setAccountId(Integer.parseInt(account.getId()));		List<BankAccount> list=bankAccountService.selectList(bankAccount);		if(list!=null && list.size()>0){			model.addAttribute("status",-1);			model.addAttribute("bankAccountList", list);//收入明细			return "/paygate/withdrawCash/chooseAccount";		}else{			return "redirect:/auth/account/addAcount";		}	}	//申请提现	@RequestMapping("auth/account/addBankAcount")	public String addBankAccount(ModelMap model, BankAccount e){		Account account = LoginUserHolder.getLoginAccount();		if (account == null || StringUtils.isBlank(account.getAccount())) {			return toLogin;		}		e.setAccountId(Integer.parseInt(account.getId()));		e.setBankName("支付宝");//暂时提现只支持支付宝		bankAccountService.insert(e);		return "redirect:/auth/account/chooseAccount";	}}