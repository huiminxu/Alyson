package net.yozo.web.action.front.template;import com.alibaba.fastjson.JSON;import net.sf.json.JSONObject;import net.yozo.core.FrontContainer;import net.yozo.core.KeyValueHelper;import net.yozo.core.dao.page.PagerModel;import net.yozo.core.front.SystemManager;import net.yozo.core.util.LRULinkedHashMap;import net.yozo.core.weixin.util.Weixin;import net.yozo.services.front.account.AccountService;import net.yozo.services.front.account.bean.Account;import net.yozo.services.front.address.AddressService;import net.yozo.services.front.attribute.bean.Attribute;import net.yozo.services.front.attribute_link.Attribute_linkService;import net.yozo.services.front.catalog.bean.Catalog;import net.yozo.services.front.comment.CommentService;import net.yozo.services.front.comment.bean.Comment;import net.yozo.services.front.customizeOrder.CustomizeOrderService;import net.yozo.services.front.customizeOrder.bean.CustomizeOrder;import net.yozo.services.front.designer.DesignerService;import net.yozo.services.front.designer.bean.Designer;import net.yozo.services.front.download.DownloadService;import net.yozo.services.front.download.bean.Download;import net.yozo.services.front.emailNotifyProduct.EmailNotifyProductService;import net.yozo.services.front.favorite.FavoriteService;import net.yozo.services.front.favorite.bean.Favorite;import net.yozo.services.front.news.NewsService;import net.yozo.services.front.news.bean.News;import net.yozo.services.front.order.OrderService;import net.yozo.services.front.order.bean.Order;import net.yozo.services.front.scoreDetail.ScoreDetailService;import net.yozo.services.front.template.TemplateService;import net.yozo.services.front.template.bean.Template;import net.yozo.services.front.gift.GiftService;import net.yozo.services.front.gift.bean.Gift;import net.yozo.services.front.label.LabelService;import net.yozo.services.front.label.bean.Label;import net.yozo.services.front.spec.SpecService;import net.yozo.services.front.systemSetting.bean.SystemSetting;import net.yozo.services.plugins.WeixinService;import net.yozo.services.plugins.dto.WeixinConfig;import net.yozo.web.action.front.FrontBaseController;import net.yozo.web.util.LoginUserHolder;import net.yozo.web.util.RequestHolder;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.*;import java.net.HttpURLConnection;import java.net.URL;import java.net.URLConnection;import java.net.URLEncoder;import java.util.*;/** * 商品信息管理 * * @author jqsl2012@163.com * @author joey * */@Controller("frontTemplateAction")public class TemplateAction extends FrontBaseController<Template> {	private static final long serialVersionUID = 1L;	private static final org.apache.logging.log4j.Logger logger = org.apache.logging.log4j.LogManager.getLogger(TemplateAction.class);	@Autowired	private TemplateService templateService;//商品服务	@Autowired	private AccountService accountService;//用户服务	@Autowired	private CommentService commentService;//评论服务	@Autowired	private AddressService addressService;//收货人地址服务	@Autowired	private Attribute_linkService attribute_linkService;//商品属性链接表服务	@Autowired	private NewsService newsService;//文章服务	@Autowired	private FavoriteService favoriteService;//商品收藏夹服务	@Autowired	private EmailNotifyProductService emailNotifyProductService;//商品到货通知	@Autowired	private LabelService labelService;	@Autowired	private SpecService specService;	@Autowired	private GiftService giftService;	@Autowired	private DownloadService downloadService;	@Autowired	private OrderService orderService;	@Autowired	private ScoreDetailService scoreDetailService;	@Autowired	protected CustomizeOrderService customizeOrderService;	@Autowired	private DesignerService designerService;//设计师	@Autowired	private WeixinService weixinService;	@Value("${store.prefixUrl}")	private String prefixUrl;	@Value("${store.dirUrl}")	private String dirUrl;	@Value("${website.url}")	private String websiteUrl;	@Override	public TemplateService getService() {		return templateService;	}	@ModelAttribute("catalogCode")	public String getCatalogCode() {		String catalogCode = RequestHolder.getRequest().getParameter("catalogCode");		if (StringUtils.isBlank(catalogCode)) {			String attributeID = RequestHolder.getRequest().getParameter("attrID");			Attribute attr;			if (StringUtils.isNotBlank(attributeID) && (attr = SystemManager.getInstance().getAttrsMap().get(StringUtils.trim(attributeID))) != null) {				catalogCode = SystemManager.getInstance().getCatalogsMap().get(String.valueOf(attr.getCatalogID())).getCode();			}		}		return StringUtils.trimToNull(catalogCode);	}	/**	 * 查询指定的产品明细	 *	 * @return	 * @throws Exception	 */	@RequestMapping("template/detail/{id}")	public String templateDetail(ModelMap model, @PathVariable("id") String id,HttpServletRequest request) throws Exception {		Template template = templateService.selectById(id);		List<String> labelNames = templateService.getLabelNamesById(template.getId());		Catalog item = SystemManager.getInstance().getCatalogsMap().get(template.getCatalogID());		model.addAttribute("catalogCode",item.getCode());		template.setLabelNames(labelNames);		templateService.updateHit(template);		int videoType=0;		if(item.getCode().toLowerCase().contains("ae")){			if(template.getVideoUrl() != null &&!template.getVideoUrl().toLowerCase().startsWith(websiteUrl)){				videoType=1;			}		}		model.addAttribute("videoType",videoType);		Template randomT=new Template();		while(id.equals(randomT.getId()) || randomT.getId()==null){			randomT=randomRecommendTemplate(item.getCode());		}		model.addAttribute("randomT",randomT);		Account acc = getLoginAccount();		if(acc!=null) {			Favorite favorite = new Favorite();			favorite.setAccount(acc.getId());			favorite.setProductID(id);			List<Favorite> favorites = favoriteService.selectList(favorite);			if (favorites.size()>0) {				model.addAttribute("favorite", "y");			} else {				model.addAttribute("favorite", "n");			}		}		String designerId=null;		if(template.getSource()==2) {			//前台上传			Account author = accountService.selectById(template.getAuthor());			//判断上传用户是否为设计师			Designer d=designerService.selectByAccountId(Integer.parseInt(template.getAuthor()));			if(d!=null && !StringUtils.isBlank(d.getId()) && Designer.DESIGNER_AUSTA_Y==d.getAuditStatus()){				designerId=d.getId();			}			template.setAuthor(author.getNickname());			template.setAvater(author.getAvater());		}		model.addAttribute("e", template);		model.addAttribute("designId", designerId);		//获得JS-SDK configure		WeixinConfig weixinConfig =weixinService.getWeixinConfig("http://www.yomoer.cn/template/detail/"+id+".html");		model.addAttribute("weixinConfig", weixinConfig);		return "iframe";	}	@RequestMapping(value="template/templateInf",method = RequestMethod.GET)	@ResponseBody	public String templateInf(ModelMap model){		String id = RequestHolder.getRequest().getParameter("id");		Template template = templateService.selectById(id);		Account acc = getLoginAccount();		Favorite favorite = new Favorite();		if(acc!=null) {			favorite.setAccount(acc.getId());			favorite.setProductID(id);		}		List<Favorite> favorites = favoriteService.selectList(favorite);		if (favorites.size()>0) {			template.setFavorite("y");		}else{			template.setFavorite("n");		}		String result= JSON.toJSON(template).toString();		System.out.println(result);		return result;	}	@RequestMapping("template/buyNow")	public String buyNow(ModelMap model, @ModelAttribute("e") Template t, HttpServletRequest request) throws Exception {		return "buyNow";	}	@RequestMapping("auth/template/download")	public String download(ModelMap model, @ModelAttribute("e") Template t, HttpServletResponse response, HttpServletRequest request) throws Exception {		Account acc = getLoginAccount();		String templateID = RequestHolder.getRequest().getParameter("id");		if(acc==null || StringUtils.isBlank(acc.getId())){			request.getSession().setAttribute("lastUrl","auth/template/download?id="+templateID);			return ("/account/login");		}		Template template = templateService.selectById(templateID);		//判断模板是否免费		if(template.getScore()!=0||!"0.00".equals(template.getNowPrice())){			//不免费，判断是否有权限下载模板			Order order=new Order();			order=orderService.selectOrderByAidAndTid(acc.getId(),templateID);			if(order==null || "wait".equals(order.getStatus())){				logger.error("非法操作，未支付直接下载，用户id:"+acc.getId()+",非法下载模板id:"+templateID);				throw new Exception("非法操作，未支付直接下载，用户id:"+acc.getId()+",非法下载模板id:"+templateID);			}		}		templateService.updateSellCount(template);		Download d=new Download();		d.setAccount(acc.getId());		d.setProductID(templateID);		int count=downloadService.selectCount(d);		if(count==0){			//第一次下载,插入下载表			downloadService.insert(d);		}else{			//不是第一次下载该模板，更新下载时间			downloadService.updateLastDownloadTime(d);		}		//积分任务		if("0.00".equals(template.getNowPrice())&&template.getScore()==0){			scoreDetailService.addScoreAllOperations(acc.getId(),"daily_mbxz");//日常任务，下载免费模板			scoreDetailService.addScoreAllOperations(acc.getId(),"times_xzmb");//成长任务多次，下载免费模板		}		String fileUrl = prefixUrl+template.getFileUrl();		String  filename = fileUrl.substring(fileUrl.lastIndexOf("/")+1);		filename = processFileName( request,  filename);		BufferedOutputStream bf = null;		try {			response.setHeader("Content-disposition", "attachment; filename = " + filename);			//response.addHeader("Content-Disposition", "attachment;filename="+new String(filename.getBytes("utf-8"),"iso-8859-1"));			bf = new BufferedOutputStream(response.getOutputStream());			bf.write(this.httpConverBytes(fileUrl,request));		} catch (Exception e) {			e.printStackTrace();		}		finally {			if (bf != null) {				bf.close();				bf.flush();			}		}		return null;	}	@RequestMapping(value="auth/template/checkFileExist",method = RequestMethod.POST)	@ResponseBody	public String checkFileExist(ModelMap model, HttpServletResponse response, HttpServletRequest request) throws Exception {		String templateID = request.getParameter("id");		Template template = templateService.selectById(templateID);		//判断文件是否存在		String relFileUrl=dirUrl + template.getFileUrl();		File file = new File(relFileUrl);		if(!file.exists() || template==null || StringUtils.isBlank(template.getFileUrl())){			//如果文件不存在			logger.error("文件缺失，模板ID:"+template.getId()+"  模板文件存放位置："+template.getFileUrl());			return "fail";		}else {			return "success";		}	}	/**	 * @MethodName httpConverBytes	 * @Description http路径文件内容获取	 *	 * @param path	 * @return	 */	public static byte[] httpConverBytes(String path,HttpServletRequest request) {		BufferedInputStream in = null;		ByteArrayOutputStream out = null;		URLConnection conn = null;		int httpResult=0;		try {			StringBuffer sb = new StringBuffer();			for(int i=0;i<path.length();i++){				char a=path.charAt(i);				if(a>127){//将中文UTF-8编码					sb.append(URLEncoder.encode(String.valueOf(a), "utf-8"));				}else{					sb.append(String.valueOf(a));				}			}			URL url = new URL(sb.toString()); //创建URL			URLConnection urlconn = url.openConnection(); // 试图连接并取得返回状态码urlconn.connect(); 			HttpURLConnection httpconn = (HttpURLConnection) urlconn;			httpResult = httpconn.getResponseCode();			in = new BufferedInputStream(httpconn.getInputStream());			if (httpResult != HttpURLConnection.HTTP_OK){  //不等于HTTP_OK说明连接不成功				System.out.print("连接失败！");			}else {				out = new ByteArrayOutputStream(1024);				byte[] temp = new byte[1024];				int size = 0;				while ((size = in.read(temp)) != -1) {					out.write(temp, 0, size);				}				byte[] content = out.toByteArray();				return content;			}		} catch (Exception e) {			e.printStackTrace();		}		finally {			try {				in.close();			} catch (IOException e) {				e.printStackTrace();			}			try {				out.close();			} catch (IOException e) {				e.printStackTrace();			}		}		return null;	}	/**	 *	 * @Title: processFileName	 *	 * @Description: ie,chrom,firfox下处理文件名显示乱码	 */	public static String processFileName(HttpServletRequest request, String fileNames) {		String codedfilename = null;		try {			String agent = request.getHeader("USER-AGENT");			if (null != agent && -1 != agent.indexOf("MSIE") || agent.toLowerCase().contains("like gecko")|| null != agent && -1 != agent.indexOf("Trident")) {// ie				String name = URLEncoder.encode(fileNames, "UTF8");				codedfilename = name;			} else if (null != agent && -1 != agent.indexOf("Mozilla")) {// 火狐,chrome等				codedfilename = new String(fileNames.getBytes("UTF-8"), "iso-8859-1");			}		} catch (Exception e) {			e.printStackTrace();		}		return codedfilename;	}	@ModelAttribute("catalog")	public Catalog getCatalog(){		Catalog catalog = null;		String catalogCode = getCatalogCode();		if(StringUtils.isNotBlank(catalogCode)){			return SystemManager.getInstance().getCatalogsCodeMap().get(catalogCode);		} else {			return catalog;		}	}	@ModelAttribute("catalogChildren")	public List<Catalog> getCatalogChildren(){		Catalog catalog = getCatalog();		if(catalog != null){			return catalog.getChildren();		}		return new ArrayList<Catalog>();	}	@ModelAttribute("attrs")	public List<Attribute> getAttrs() {		Catalog catalog = getCatalog();		return new ArrayList<Attribute>();	}	/**	 * 根据商品关键字搜索商品列表	 * @return	 * @throws Exception	 */	@RequestMapping(value = "template/search")	public ModelAndView search(ModelMap model, HttpServletRequest request, @ModelAttribute("e")Template e) throws Exception{		ModelAndView mv = new ModelAndView();		mv.setViewName("templateList");		String key = request.getParameter("key");//搜索关键字		String catalogId = request.getParameter("catalogId");//搜索关键字		String isFee= request.getParameter("isFee");		if(StringUtils.isEmpty(catalogId)){			return mv;		}		Map<String, String[]> params = request.getParameterMap();		StringBuilder  queryString = new StringBuilder();		if(!params.keySet().contains("account")) {			for (String tmp : params.keySet()) {				if (tmp.equals("key") || tmp.equals("catalogId") || tmp.equals("pager.offset")) {					String[] values = params.get(tmp);					for (int i = 0; i < values.length; i++) {						String value = values[i];						queryString.append(tmp).append("=").append(value).append("&");					}				}			}			// 去掉最后一个空格			String queryStr = queryString.substring(0, queryString.length() - 1);			String lastUrl = request.getServletPath()+"?"+queryStr;			request.getSession().setAttribute("lastUrl",lastUrl.substring(1));		}else{		}		e.setName(key);		if(catalogId.equals("1")){			e.setCatalogID(null);		}else{			e.setCatalogID(catalogId);		}		e.setIsFee(isFee);		e.setOrderBy(4);//搜索功能默认按推荐排序		List<Catalog> catalogs = systemManager.getCatalogs();		loadLabels(catalogs);		Catalog item=new Catalog();		String showStyle="";		if(catalogId.equals("1")){			e.setPageSize(20);		}else{			item = SystemManager.getInstance().getCatalogsMap().get(catalogId);			if(item.getCode().toLowerCase().contains("ae")){				showStyle = "3";				e.setPageSize(8);			}else if(item.getCode().toLowerCase().toLowerCase().contains("biaoqing")){				showStyle = "1";				e.setPageSize(8);			}else{				showStyle = "2";				e.setPageSize(12);			}		}		PagerModel pager = selectTemplateList1(request,e);		//加载收藏信息		loadFavorite(pager.getList());		List<Template> templateList = pager.getList();		pager.setPagerUrl("search");		model.addAttribute("key", key);		model.addAttribute("catalogId",catalogId);		model.addAttribute("templateList", templateList);		if(item.getCode()==null){			model.addAttribute("catalogCode","ALL");			model.addAttribute("mainCatalogCode", "ALL");		}else{			model.addAttribute("catalogCode",item.getCode());			model.addAttribute("mainCatalogCode", item.getCode());		}		model.addAttribute("pager", pager);		model.addAttribute("catalogs",catalogs);		model.addAttribute("selectedCatalog",item);		model.addAttribute("showStyle", showStyle);		model.addAttribute("orderBy", "4");		model.addAttribute("isFee", isFee);		return mv;	}	/**	 * 根据商品属性加载商品列表	 * @return	 * @throws Exception	 */	@RequestMapping("template/templateListByAttrID")	public String productListByAttrID(ModelMap model,HttpServletRequest request, @ModelAttribute("e")Template e) throws Exception{		try {			templateList(model, e,request);		} catch (Exception ex) {			logger.error("productListByAttrID()异常："+ex.getMessage());			ex.printStackTrace();			throw ex;		}		return "templateList";	}	/**	 * 根据商品目录、子目录、属性、排序等规则分页加载商品列表信息。此方法为商品加载的通用方法。	 * @return	 * @throws Exception	 */	@RequestMapping("template/templateList")	public String templateList(ModelMap model, @ModelAttribute("e")Template e,HttpServletRequest request) throws Exception{		Map m=getTemplateList(request,e,model);		Catalog item=(Catalog)m.get("selectedCatalog");		PagerModel pager=(PagerModel)m.get("pager");		model.addAttribute("catalogs",m.get("catalogs"));		model.addAttribute("orderBy",m.get("orderBy"));		model.addAttribute("ids",m.get("ids"));		model.addAttribute("isFee",m.get("isFee"));		if(item==null){			model.addAttribute("catalogCode","ALL");			model.addAttribute("mainCatalogCode", "ALL");		}else{			model.addAttribute("catalogCode",item.getCode());			model.addAttribute("mainCatalogCode", item.getCode());		}		model.addAttribute("key",m.get("key"));		model.addAttribute("selectedCatalog",item);		model.addAttribute("showStyle", m.get("showStyle"));		model.addAttribute("templateList", pager.getList());		model.addAttribute("pager", pager);		return "templateList";	}	@RequestMapping(value="template/templateAL",method = RequestMethod.GET)	@ResponseBody	public String templateAL(ModelMap model) throws Exception{		Map<String,Object> map = new HashMap<String,Object>();		HttpServletRequest request=RequestHolder.getRequest();		Template t=new Template();		map=getTemplateList(request,t,model);		String result= JSON.toJSON(map).toString();		System.out.println(result);		return result;	}	private Map getTemplateList(HttpServletRequest request,Template e,ModelMap model) throws Exception{		Map<String,Object> map = new HashMap<String,Object>();		try {			String isFee = request.getParameter("isFee");			String ids = request.getParameter("ids");			String offset = request.getParameter("pager.offset");			String key=request.getParameter("key");			if(key==null){				key="";			}			String catalogCode = getCatalogCode();			String queryString = request.getQueryString();			if(StringUtils.isNotEmpty(queryString)) {				queryString = queryString.contains("isFee") ? queryString : queryString + "&isFee=" + isFee;			}			String lastUrl = request.getServletPath()+"?"+queryString;			logger.debug("----------lastUrl------------"+lastUrl.substring(1));			request.getSession().setAttribute("lastUrl",lastUrl.substring(1));			String showStyle ="";			if(catalogCode.toLowerCase().contains("ae")){				showStyle = "3";				e.setPageSize(8);			}else if(catalogCode.toLowerCase().contains("biaoqing")){				showStyle = "1";				e.setPageSize(8);			}else if(catalogCode.toLowerCase().contains("all")){				e.setPageSize(20);			}else{				showStyle = "2";				e.setPageSize(12);			}			if(StringUtils.isNotEmpty(isFee)){				e.setIsFee(isFee);				model.addAttribute("isFee",isFee);			}			String orderby = request.getParameter("orderBy");			if (StringUtils.isNotEmpty(orderby)) {				e.setOrderBy(Integer.parseInt(orderby));			}else{				orderby="4";				e.setOrderBy(4);//默认推荐排序			}			logger.debug("-------------"+ids+"----" + orderby);			if(StringUtils.isNotEmpty(ids)){				String[] idArr = ids.split("-");				List<String> arrayList = new ArrayList<String>(Arrays.asList(idArr));				List<Integer> arrList = new ArrayList<Integer>();				for(String temp: arrayList){					arrList.add(Integer.parseInt(temp));				}				e.setQueryLabelIDs(arrList);			}			Catalog item = systemManager.getCatalogsCodeMap().get(catalogCode);			List<Catalog> catalogs = systemManager.getCatalogs();			if(item!=null){				e.setCatalogID(item.getId());				logger.error("item.getId()="+item.getId());			}			loadLabels(catalogs);			//加载商品			PagerModel pager =null;			if((StringUtils.isNotEmpty(key)&&key!="")||catalogCode.toLowerCase().contains("all")){				e.setName(key);				pager = selectTemplateList1(request,e);			}else{				pager = selectTemplateList0( e);			}			model.addAttribute("ids",ids);			//加载收藏信息			loadFavorite(pager.getList());			pager.setPagerUrl("templateList");			map.put("catalogs",catalogs);			map.put("orderBy",orderby);			map.put("isFee",isFee);			map.put("ids",ids);			map.put("selectedCatalog",item);			map.put("showStyle", showStyle);			map.put("pager", pager);			map.put("key",key);			//model.addAttribute("orderMap", orderMap);		} catch (Exception ex) {			logger.error("productList()异常："+ex.getMessage());			ex.printStackTrace();			throw ex;		}		return map;	}	/**	 * 根据商品分类加载商品属性列表	 * @catalogID 商品类别ID	 */	private void loadFavorite(List<Template> templates) {		Account acc = getLoginAccount();		if(acc==null || StringUtils.isBlank(acc.getId())){			return ;		}		for(Template template:templates){			Favorite favorite = new Favorite();			favorite.setAccount(acc.getId());			favorite.setProductID(template.getId());			List<Favorite> favorites = favoriteService.selectList(favorite);			if (favorites.size()>0) {				template.setFavorite("y");			} else {				template.setFavorite("n");			}		}	}	/**	 * 根据商品分类加载商品属性列表	 * @catalogID 商品类别ID	 */	private void loadLabels(List<Catalog> catalogs) {		for(Catalog catalog: catalogs) {			Label label = new Label();			label.setCatalogID(Integer.parseInt(catalog.getId()));			List<Label> labelList = this.labelService.selectList(label);			//加载每个属性下的子属性列表			if (labelList != null && labelList.size() > 0) {				label.setCatalogID(0);				label.setPid(0);//属性的				for (int i = 0; i < labelList.size(); i++) {					Label item = labelList.get(i);					label.setPid(Integer.valueOf(item.getId()));					//###					item.setLabelList(this.labelService.selectList(label));				}			}			catalog.setLabels(labelList);		}	}	/**	 * 加载热门、特价、最新的商品列表信息	 * @return	 * @throws Exception	 */	@RequestMapping("template/special/{code}")	public String specialProductList(ModelMap model,@ModelAttribute("code")@PathVariable("code") String code) throws Exception{		logger.error("special="+code);		//加载商品		Template e = new Template();//e.setSpecial(code);		PagerModel pager = selectTemplateList0( e);		pager.setPagerUrl(code+".html");		Map<String, String> orderMap = KeyValueHelper.getMap("product_orderBy_");		model.addAttribute("templateList", pager.getList());		model.addAttribute("pager", pager);		model.addAttribute("orderMap", orderMap);		//指定分页请求的地址//		pager.setPagerUrl(special+".html");		return "specialProductList";	}	/**	 * 加载热门、特价、最新的商品列表信息	 * @return	 * @throws Exception	 */	@RequestMapping("template/zt")	public String showZhuanTi(ModelMap model) throws Exception{		return "zt1";	}	/**	 * 查询指定的产品明细	 * @return	 * @throws Exception	 */	//@RequestMapping("{id}")	public String template(ModelMap model, @PathVariable("id")String id) throws Exception{		Template e = getService().selectById(id);		Template p = new Template();		p.setId(e.getId());//		p.setHit(e.getHit()+1);//浏览次数++		templateService.updateHit(p);		String url = "/jsp/product/"+e.getId()+".jsp";		logger.error("url = " + url);		model.addAttribute("productHTMLUrl", url);		Comment comment = new Comment();		comment.setProductID(e.getId());		PagerModel commentPager = selectPageList(commentService, comment);		model.addAttribute("pager", commentPager);		model.addAttribute("e", e);		model.addAttribute("commentTypeCode", systemManager.getCommentTypeCode());		return "product";	}	/**	 * 分页加载产品列表，每4个一行的显示	 * @param e	 * @return	 * @throws Exception	 */	private PagerModel selectTemplateList0(Template e) throws Exception {		PagerModel pager = super.selectPageList(getService(), e);//分页搜索数据库中的商品		return pager;	}	private PagerModel selectTemplateList1(HttpServletRequest request,Template e) throws Exception {		int offset = 0;//分页偏移量		if (request.getParameter("pager.offset") != null) {			offset = Integer.parseInt(request.getParameter("pager.offset"));			//e = (Template) request.getSession().getAttribute("existed");		}else{			request.getSession().setAttribute("existed",e);		}		if (offset < 0)			offset = 0;		e.setOffset(offset);		PagerModel pager = templateService.queryKeyWordsPageList(e);		if (pager == null) {			pager = new PagerModel();		}		// 计算总页数		pager.setPageSize(e.getPageSize());		pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)				/ pager.getPageSize());		pager.setOffset(offset);		return pager;	}	/**	 * 添加商品到收藏夹	 * @return	 * @throws IOException	 */	@RequestMapping("template/addToFavorite")	@ResponseBody	public String addToFavorite(ModelMap model, @ModelAttribute("e")Template e,HttpServletRequest request) throws IOException{		return modifyFavorite(request);	}	private String modifyFavorite(HttpServletRequest request){		String templateId = RequestHolder.getRequest().getParameter("templateId");		String flag = RequestHolder.getRequest().getParameter("flag");		String type =  RequestHolder.getRequest().getParameter("type"); //type:"topic"		if(StringUtils.isBlank(templateId)){			throw new NullPointerException(FrontContainer.request_illegal_error);		}		Account acc = getLoginAccount();		if(acc==null || StringUtils.isBlank(acc.getId())){			return ("-1");		}		Favorite favorite = new Favorite();		favorite.setAccount(acc.getId());		if ("topic".equals(type)){			favorite.setTopicId(Integer.valueOf(templateId));		}else{			favorite.setProductID(templateId);		}		String result = null;		synchronized (FrontContainer.insert_favorite_lock) {			if(flag.equals("1")){				if(favoriteService.selectCount(favorite) == 0){					favoriteService.insert(favorite);					result = "0";//添加成功				}else{					result = "1";//已经添加过了				}			}else{				favoriteService.delete(favorite);				result = "2";  // 取消成功			}		}		return result;	}	/**	 *	 * 收藏夹-取消收藏	 * @return	 * @throws IOException	 */	@RequestMapping("template/cancelFavorite")	public String cancelFavorite(ModelMap model, @ModelAttribute("e")Template e,HttpServletRequest request) throws IOException{		modifyFavorite(request);		return "redirect:/auth/account/favorite";	}	public boolean isEmpty(String value){		if(value==null || value.trim().length()==0){			return true;		}		return false;	}	/**	 * 获取新闻列表	 * @return	 * @throws Exception	 */	@RequestMapping("template/newsList")	public String newsList(ModelMap model, @ModelAttribute("e")News news) throws Exception{		News newsInfo = new News();		newsInfo.setType(News.news_type_notice);		model.addAttribute("pager", super.selectPageList(newsService, newsInfo));		return "newsList";	}	//返回随机的推荐模板的json	@RequestMapping(value="template/randomRecommend",method = RequestMethod.POST)	@ResponseBody	public String randomRecommend(ModelMap model) throws Exception{		String name = RequestHolder.getRequest().getParameter("name");		String tid = RequestHolder.getRequest().getParameter("tid");		String rid= RequestHolder.getRequest().getParameter("rid");		Template t=new Template();		while(tid.equals(t.getId()) || t.getId()==null || rid.equals(t.getId())) {			t = randomRecommendTemplate(name);		}		String result= JSON.toJSON(t).toString();		System.out.println(result);		return result;	}	//返回随机的（最新、推荐、精品、上架）的8个模板中的一个的模板	private Template randomRecommendTemplate(String name){		Template t=new Template();		t.setName(name);		t.setOrderBy(1);//最新推荐		t.setTop(8);//前8条数据		List<Template> templates = templateService.selectIndexList(t);		Random random = new Random();		int a=random.nextInt(8);//生成0~8的随机数		Template t2=templates.get(a);		return t2;	}	//用户对于审核未通过模板进行的删除操作	@RequestMapping("template/delTemp")	public void deleteTemp(HttpServletRequest request) {		Account acc= LoginUserHolder.getLoginAccount();		String id=request.getParameter("id");		Template t=new Template();		t.setId(id);		t.setStatus(-1);		t.setAuthor(acc.getId());		t=templateService.selectForDelete(t);//防止恶意修改前台传入的id值导致误删		if(t!=null){			t.setStatus(3);//删除状态			templateService.update(t);		}	}	//定制订单下载	@RequestMapping("auth/template/customizeTempDownload")	public String customizeTempDownload(  HttpServletResponse response, HttpServletRequest request) throws Exception {		String customizeOrderID = RequestHolder.getRequest().getParameter("id");		CustomizeOrder customizeOrder=customizeOrderService.selectById(customizeOrderID);		String fileUrl = prefixUrl+customizeOrder.getTemplate();		String  filename = fileUrl.substring(fileUrl.lastIndexOf("/")+1);		filename = processFileName( request,  filename);		String prefix=filename.substring(filename.lastIndexOf("."));		BufferedOutputStream bf = null;		try {			response.setHeader("Content-disposition", "attachment; filename = " + customizeOrder.getOrderNum()+prefix);			bf = new BufferedOutputStream(response.getOutputStream());			bf.write(this.httpConverBytes(fileUrl,request));		} catch (Exception e) {			e.printStackTrace();		}		finally {			if (bf != null) {				bf.close();				bf.flush();			}		}		return null;	}	/**	 * 查询推荐模板（推荐至少显示3页，相关模板不满3页，显示推荐模板）	 * @param data	 * @return	 * @throws Exception	 */	@RequestMapping("/template/related")	@ResponseBody	public JSONObject relatedTemplate(@RequestBody(required = false) JSONObject data) throws Exception{		JSONObject result = new JSONObject();		int currentPage = 1;		if (!data.containsKey("templateId")){			result.put("code","100001");			result.put("msg","模板ID为空");			return result;		}else if (data.containsKey("currentPage")){			currentPage = data.getInt("currentPage");		}		Account acc = getLoginAccount();		int templateId = data.getInt("templateId");		if (acc != null){			result = templateService.getRelatedTempalte(templateId, currentPage,acc.getId());		}else{			result = templateService.getRelatedTempalte(templateId, currentPage,null);		}		return result;	}}