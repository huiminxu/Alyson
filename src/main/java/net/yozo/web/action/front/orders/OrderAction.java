package net.yozo.web.action.front.orders;import com.alipay.api.AlipayApiException;import com.alipay.api.AlipayClient;import com.alipay.api.DefaultAlipayClient;import com.alipay.api.request.AlipayTradePagePayRequest;import net.sf.json.JSONObject;import net.yozo.core.FrontContainer;import net.yozo.core.alipay.Main;import net.yozo.core.cache.RedisCacheProvider;import net.yozo.core.dao.page.PagerModel;import net.yozo.core.front.SystemManager;import net.yozo.core.ipaynow.WeixinPay;import net.yozo.core.kuaidi100Helper;import net.yozo.services.common.Youdian;import net.yozo.services.front.account.AccountService;import net.yozo.services.front.account.bean.Account;import net.yozo.services.front.address.AddressService;import net.yozo.services.front.comment.CommentService;import net.yozo.services.front.comment.bean.Comment;import net.yozo.services.front.order.OrderService;import net.yozo.services.front.order.bean.Order;import net.yozo.services.front.orderdetail.OrderdetailService;import net.yozo.services.front.orderdetail.bean.Orderdetail;import net.yozo.services.front.orderpay.OrderpayService;import net.yozo.services.front.orderpay.bean.Orderpay;import net.yozo.services.front.ordership.OrdershipService;import net.yozo.services.front.ordership.bean.Ordership;import net.yozo.services.front.pay.PayService;import net.yozo.services.front.template.TemplateService;import net.yozo.services.front.template.bean.Template;import net.yozo.services.front.youdian.YoudianService;import net.yozo.web.action.front.FrontBaseController;import net.yozo.web.util.LoginUserHolder;import net.yozo.web.util.RequestHolder;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.*;import sun.misc.BASE64Decoder;import sun.misc.BASE64Encoder;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.*;import java.net.URL;import java.net.URLConnection;import java.text.DecimalFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.LinkedList;import java.util.List;import java.util.Properties;/** * 门户订单服务类 *  * @author Administrator *  */@Controller("frontOrderAction")public class OrderAction extends FrontBaseController<Order> {	private static final Logger logger = LoggerFactory.getLogger(OrderAction.class);	private static final long serialVersionUID = 1L;	private static SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");	@Autowired	private PayService payService;	@Autowired	private OrderService orderService;	@Autowired	private TemplateService templateService;//商品服务	@Autowired	private OrderdetailService orderdetailService;	@Autowired	private OrderpayService orderpayService;	@Autowired	private CommentService commentService;	@Autowired	private YoudianService youdianService;	@Autowired	private OrdershipService ordershipService;	@Autowired	private AddressService addressService;	@Autowired	private RedisCacheProvider redisCacheProvider;	@Autowired	private AccountService accountService;	@Override	public OrderService getService() {		return orderService;	}	public void setOrderService(OrderService orderService) {		this.orderService = orderService;	}	/**	 * 订单确认页面，点击这个页面的确认支付按钮则会跳转到支付宝等的支付页面	 * 	 * @return	 */	@RequestMapping("order/orderConfirm")	public String orderConfirm() {		return "/confirmOrder";	}	@RequestMapping(value = "auth/order/pay", method = RequestMethod.GET)	public String pay(Order e, ModelMap model,HttpServletRequest request) throws Exception{		Account account = getLoginAccount();		if (account == null || StringUtils.isBlank(account.getId())) {			return page_toLoginRedirect;		}		String t_id = request.getParameter("id");		String t_payType = request.getParameter("payType");		request.getSession().setAttribute("tId",t_id);		request.getSession().setAttribute("defaultCatalog",systemManager.getCatalogs().get(0));		return insertAndPay(account,t_id, model,request,t_payType);	}	/**	 * 创建订单，	 * 	 * @return	 * @throws Exception	 */	private String insertAndPay(Account account,String id, ModelMap model,HttpServletRequest request,String payType) throws Exception {		Template template = templateService.selectById(id);		String flag = "";		//判断用户是否购买过此模板        Order order = orderService.selectOrderByAidAndTid(account.getId(),id);        if(order!=null){        	// model.addAttribute("templateId",order.getTemplateId());			//如果是现金支付的，获取orderpay的id			/*if(order.getPayType()==order.paytype_xianjin){				Orderpay orderpay = orderpayService.selectOneByOrderId(order);				order.setOrderpayID(orderpay.getId());			}*/			flag = "y";		}else {			//创建订单对象			order = new Order();			order.setAccount(account.getId());			order.setStatus(Order.status_waitforpay);			//order.setPaystatus(Order.order_paystatus_n);*syy			//通过redis设置订单号（T年月日时分秒00001）			String orderNum=redisCacheProvider.numberGenerator("T");//目前生成的订单均为单个模板("T"代表Template)			order.setOrderNum(orderNum);			//由于现在支付接口不支持重复提交同一订单，所以采用随机数合成此接口专用订单号			order.setRemark("M"+(int)((Math.random()*9+1)*10000));			order.setTemplateId(Integer.parseInt(template.getId()));			order.setTemplateName(template.getName());			order.setPayType(Integer.parseInt(payType));			Date orderTime=new Date();			//下单时用户处于会员期，除模板新品5折外，其他都免费			if(account.getVipDate()!=null && orderTime.before(sdf.parse(account.getVipDate()))){				//新品模板保护期内（30天）5折				if(orderTime.before(org.apache.commons.lang.time.DateUtils.addDays(template.getCreateTime(),30))){					template.setScore(template.getScore()/2);					template.setNowPrice(String.valueOf(Double.parseDouble(template.getNowPrice())/2));				}else{					template.setScore(0);					template.setNowPrice("0");				}			}			if(order.getPayType()==order.paytype_jifen){				order.setAmount(String.valueOf(template.getScore()));				int orderId= orderService.insert(order);//积分订单，数据只存在t_order表中				order.setId(String.valueOf(orderId));			}else if(order.getPayType()==order.paytype_xianjin){//现金支付				order.setAmount(template.getNowPrice());				//对金额进行格式化，防止出现double型数字计算造成的益出。				//order.setAmount(""+(int)(100*Double.valueOf(order.getAmount())));//订单总金额//支付平台使用的计数单位为“分”且为整数				logger.info("order.getAmount()=" + order.getAmount());				//现金支付：创建订单并插入到数据库（数据存放在t_order和t_orderpay两张表中）				//orderService.createOrder(order, null, null);				//是否启用orderpay表待定				int orderId= orderService.insert(order);				order.setId(String.valueOf(orderId));				//不继续往下走，回到上一个方法去进行二维码生成等操作				return order.getId();			}			/*int score = 0;//订单积分 等于模板的积分			order.setScore(template.getScore());			order.setAmount(template.getNowPrice());//订单总金额 = 内存订单总金额 + 总配送费*/		}		//针对会员的免费模板，不需要走积分兑换流程，直接跳兑换成功页面		if(order.getAmount().equals("0")){			order.setStatus(Order.status_paysuccess);			orderService.update(order);			Template t = templateService.selectById(order.getTemplateId()+"");			templateService.updateSellCount(t);			model.addAttribute("orderStatus","success");			return "paygate/dummy/pay";		}		return "forward:/paygate/pay?orderId="+order.getId() + "&flag="+flag;	}	/**	 * 点击我的订单页面的未付款的订单进行付款操作,则跳转到付款页面进行付款	 * @return	 */	@RequestMapping("auth/order/toPay")	public String toPay(){		if (getLoginAccount() == null) {			return page_toLogin;		}		String orderid = RequestHolder.getRequest().getParameter("id");		logger.error("orderid="+orderid);		if(StringUtils.isBlank(orderid)){			throw new NullPointerException();		}				Order order = orderService.selectById(orderid);		if(order==null){			throw new NullPointerException("根据订单号查询不到订单信息！");		}				//创建支付记录对象 syy??		/*Orderpay orderpay = new Orderpay();		orderpay.setOrderid(orderid);		orderpay.setPaystatus(Orderpay.orderpay_paystatus_n);				orderpay.setPayamount(Double.valueOf(order.getAmount()));		orderpay.setPaymethod(Orderpay.orderpay_paymethod_alipayescow);		int orderpayID = orderpayService.insert(orderpay);		logger.debug("orderpayID="+orderpayID);		order.setOrderpayID(String.valueOf(orderpayID));*/				//查询配送地址信息		return "redirect:/paygate/pay?orderId="+order.getId();	}		/**	 * 用户进行评论提交	 * @return	 * @throws Exception 	 */	@RequestMapping(value = "auth/order/doRate", method = RequestMethod.POST)	public String doRate() throws Exception{		Account acc = getLoginAccount();		if (acc == null) {			return page_toLogin;		}		logger.debug("doRate...");				int orderid = Integer.valueOf(RequestHolder.getRequest().getParameter("orderid").toString());		Order order = orderService.selectById(String.valueOf(orderid));		//备注，order表中已经删除closeComment字段		/*if (StringUtils.isNotBlank(order.getClosedComment())				&& order.getClosedComment().equals(Order.order_closedComment_y)) {			//订单的点评功能已被关闭。			throw new RuntimeException(FrontContainer.request_illegal_error);		}*/				/**		 * 暂未调用此方法		 * 用户可以对每个订单项对应的商品进行评价		 */		Orderdetail orderdetail = new Orderdetail();		orderdetail.setOrderID(orderid);		List<Orderdetail> list = orderdetailService.selectList(orderdetail);		List<Comment> comments = new LinkedList<Comment>();		for(int i=0;i<list.size();i++){			Orderdetail item = list.get(i);			//获取页面上填写的评论类容			String content = RequestHolder.getRequest().getParameter("product_"+item.getProductID());			if(StringUtils.isBlank(content)){				continue;			}			Comment c = new Comment();			c.setProductID(String.valueOf(item.getProductID()));			c.setOrderdetailID(item.getId());			c.setOrderID(String.valueOf(orderid));			c.setContent(content);			c.setStatus(Comment.comment_status_y);			c.setNickname(acc.getNickname());			c.setStar(5);			c.setAccount(acc.getAccount());			comments.add(c);		}		commentService.insertList(comments);		return ("redirect:rateSuccess");	}	@RequestMapping("order/rateSuccess")	public String rateSuccess(){		logger.error("rateSuccess...");		return "/rateSuccess";	}		/**	 * 支付成功后进行评价,转到评论页面	 * @return	 * @throws Exception 	 */	@RequestMapping("auth/order/rate")	public String rate(@ModelAttribute("e")Order e, ModelMap model) throws Exception{		Account acc = getLoginAccount();		if (acc == null) {			return page_toLogin;		}//		String productID = getRequest().getParameter("productID");		String orderid = RequestHolder.getRequest().getParameter("orderid");		if(StringUtils.isBlank(orderid)){			throw new NullPointerException("参数异常！");		}				/*		 * 用户可以对每个订单项对应的商品进行评价		 */		Orderdetail orderdetail = new Orderdetail();		orderdetail.setOrderID(Integer.valueOf(orderid));		orderdetail.setIsComment(Orderdetail.orderdetail_isComment_n);		e.setRateOrderdetailList(orderdetailService.selectList(orderdetail));		e.setId(orderid);		if(e.getRateOrderdetailList()!=null && e.getRateOrderdetailList().size()==0){			e.setRateOrderdetailList(null);		}		model.addAttribute("e", e);		return "/rate";	}		/**	 * 分页加载评论	 * @return	 * @throws Exception	 */	private PagerModel selectCommentList(Comment commentParam) throws Exception {		HttpServletRequest request = RequestHolder.getRequest();		int offset = 0;		if (request.getParameter("pager.offset") != null) {			offset = Integer					.parseInt(request.getParameter("pager.offset"));		}		if (offset < 0)			offset = 0;//		Comment comment = new Comment();		((PagerModel) commentParam).setOffset(offset);		PagerModel pager = commentService.selectPageList(commentParam);		if(pager==null)pager = new PagerModel();		// 计算总页数		pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)				/ pager.getPageSize());		//		selectListAfter();		pager.setPagerUrl("rate");		return pager;	}		DecimalFormat df = new DecimalFormat("0.00");		/**	 * 查询我的订单列表信息	 */	@RequestMapping("order/selectList")	public String selectList(HttpServletRequest request, @ModelAttribute("e") Order e, ModelMap model) throws Exception {		int offset = 0;//分页偏移量		if (request.getParameter("pager.offset") != null) {			offset = Integer.parseInt(request.getParameter("pager.offset"));		}		if (offset < 0)			offset = 0;		e.setOffset(offset);		PagerModel pager = getService().selectPageList(e);		if (pager == null) {			pager = new PagerModel();		}		// 计算总页数		pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)				/ pager.getPageSize());		pager.setPagerUrl("myCarts");		pager.setOffset(offset);		model.addAttribute("pager", pager);		return "redirect:/auth/account/orders";	}	/**	 * 删除我的订单信息	 */	@RequestMapping("order/deletes")	public String deletes(String[] ids, HttpServletRequest request, @ModelAttribute("e") Order e, ModelMap model) throws Exception {		getService().deletes(ids);		return selectList(request, e, model);	}		/**	 * 退订或取消指定的订单	 * @return	 * @throws Exception	 */	@RequestMapping("order/cancel")	public String cancel() throws Exception {		return "";	}	/**	 * 读取指定订单的信息	 * @return	 */	@RequestMapping("order/read")	public String read(){				return "";	}	/**	 * 查看订单详情	 * @return	 */	@RequestMapping("auth/order/{orderId}")	public String orderDetail(@PathVariable("orderId") String id, ModelMap model){		Account acc = getLoginAccount();		if (acc == null) {			return page_toLogin;		}		logger.error("orderInfo...");		if(StringUtils.isBlank(id)){			throw new NullPointerException("订单ID不能为空！");		}				//查询订单信息		Order order = new Order();		order.setId(id);		order.setAccount(acc.getId());		List<Order> orders = orderService.selectOrderInfo(order);		if(orders==null || orders.size()==0){			throw new NullPointerException("根据订单ID查询不到订单信息！");		}		logger.error("orders.size="+orders.size());		Order e = orders.get(0);		e.setOrders(orders);		//查询订单配送信息		Ordership ordership = new Ordership();		ordership.setOrderid(id);		ordership = ordershipService.selectOne(ordership);		if(ordership==null){			throw new NullPointerException("根据订单ID查询不到订单配送信息！");		}		e.setOrdership(ordership);				//查询订单物流信息		e.setKuaid100Info(kuaidi100Helper.selectKuaidi100());		model.addAttribute("e", e);		return "/account/orderInfo";	}		/**	 * 查看物流信息	 * @return	 */	@RequestMapping("order/orderhipInfo")	public String orderhipInfo(){		logger.error("orderhipInfo...");		return "/account/orderhipInfo";	}	/**	 * 确认订单信息	 * @return	 */	@RequestMapping("auth/order/confirmOrder")	public String confirmOrder(ModelMap model){		logger.error("confirmOrder..");		Account acc =getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {//			getSession().getAttribute(FrontContainer);			return page_toLoginRedirect;		}				//检查购买的商品是否超出可购买的库存数		CartInfo cartInfo = getMyCart();		if(cartInfo==null){			throw new NullPointerException("非法请求");		}		model.addAttribute("myCart", cartInfo);		model.addAttribute("expressList", SystemManager.getInstance().getExpressMap().values());		return "confirmOrder";	}		/**	 * 支付成功后，回调请求跳转到的页面	 * @return	 */	@RequestMapping("order/paySuccess")	public String paySuccess(){		logger.info("paySuccess...");		//return "paySuccess";		return "/paygate/dummy/paySuccess";	}	//处理现金支付订单	/*@RequestMapping("moneypay")	@ResponseBody	public String moneypay(ModelMap model,HttpServletRequest request){		String id = request.getParameter("id");//当来自模板详情页面时，此为模板id;来自二次支付（订单页面或确认支付按钮）时，此为订单编号		String payType = request.getParameter("payType");		request.getSession().setAttribute("tId",id);		request.getSession().setAttribute("defaultCatalog",systemManager.getCatalogs().get(0));		Order order =null;		//请求中带payType参数，来自模板详情页面，走订单判断方法		if(payType!=null){			String orderID=null;			try {				//生成订单				orderID=insertAndPay(id, model,request,payType);			} catch (Exception e) {				e.printStackTrace();			}			//订单已存在，代替flag=y的作用			if(orderID.startsWith("forward")){				orderID=orderID.substring(orderID.indexOf("=")+1,orderID.indexOf("&"));				order = orderService.selectById(orderID);				if("success".equals(order.getStatus())){					return toJson(new String[]{"1",order.getOrderNum(),order.getTemplateName(),order.getTemplateId()+""}).toString();//已支付				}else{					return toJson(new String[]{"2",order.getOrderNum(),order.getTemplateName()}).toString();//未支付				}			}			//新生成的订单			order = orderService.selectById(orderID);		//请求中没有payType参数，来自订单页面，直接走支付流程，但是需要重新生成随机数，合成现在支付专用订单号		}else{			order = orderService.selectByOrderNum(id);			order.setRemark("M"+(int)((Math.random()*9+1)*10000));			orderService.update(order);		}		//order = orderService.selectById("10978");//测试测试		//获得微信二维码地址		String wx=payService.getWeixinQR(order);		//String wx="22";		String[] QR=new String[]{"3",order.getOrderNum(),order.getTemplateName(),order.getAmount(),wx};		return toJson(QR).toString();	}*/ 	//处理现金支付订单	@RequestMapping("auth/order/moneypay")	public String moneypay(ModelMap model,HttpServletRequest request){		Account account = getLoginAccount();		if (account == null || StringUtils.isBlank(account.getId())) {			return page_toLoginRedirect;		}		String id = request.getParameter("id");//当来自模板详情页面时，此为模板id;来自二次支付（订单页面或确认支付按钮）时，此为订单编号		String payType = request.getParameter("payType");		request.getSession().setAttribute("tId",id);		request.getSession().setAttribute("defaultCatalog",systemManager.getCatalogs().get(0));		Order order =null;		//请求中带payType参数，来自模板详情页面，走订单判断方法		if(payType!=null){			String orderID=null;			try {				//生成订单				orderID=insertAndPay(account,id, model,request,payType);			} catch (Exception e) {				e.printStackTrace();			}			//订单已存在，代替flag=y的作用			if(orderID.startsWith("forward")){				orderID=orderID.substring(orderID.indexOf("=")+1,orderID.indexOf("&"));				order = orderService.selectById(orderID);				if("success".equals(order.getStatus())){					//已支付					model.addAttribute("status","1");					model.addAttribute("templateId",order.getTemplateId()+"");				}else{					//未支付					model.addAttribute("status","2");				}				//新生成的订单			}else{				order = orderService.selectById(orderID);				//针对会员的免费模板，不需要走现金支付流程，直接跳支付成功页面				if(order.getAmount().equals("0.00")){					order.setStatus(Order.status_paysuccess);					orderService.update(order);					Template t = templateService.selectById(order.getTemplateId()+"");					templateService.updateSellCount(t);					return "redirect:/paygate/paySuccess?status=3&orderNum="+order.getOrderNum();				}else {					model.addAttribute("status", "3");					model.addAttribute("amount", order.getAmount());					//获得微信二维码地址					String wx = payService.getWeixinQR(order);					model.addAttribute("wx", wx);					//获得支付宝二维码					String zfb = payService.getZhifubaoQR(order);					model.addAttribute("zfb", zfb);					model.addAttribute("ordertype", order.getPayType());				}			}			//请求中没有payType参数，来自订单页面或确认支付按钮，直接走支付流程，但是需要重新生成随机数，组合成现在支付专用订单号		}else{			order = orderService.selectByOrderNum(id);			order.setRemark("M"+(int)((Math.random()*9+1)*10000));			orderService.update(order);			System.out.println("------重新生成的随机数为"+order.getRemark());			//获得微信二维码地址			String wx=payService.getWeixinQR(order);			model.addAttribute("wx",wx);			//获得支付宝二维码			String zfb=payService.getZhifubaoQR(order);			model.addAttribute("zfb",zfb);			model.addAttribute("status","3");			model.addAttribute("amount",order.getAmount());			model.addAttribute("ordertype",order.getPayType());		}		model.addAttribute("orderNum",order.getOrderNum());		model.addAttribute("templateName",order.getTemplateName());		return "paygate/onlinePay/onlinepay";	}	//获取支付宝二维码(直接输出到响应位置)	@RequestMapping(value="order/getzfbQR",method = RequestMethod.GET)	public void getzfbQR(HttpServletResponse resp, HttpServletRequest request){		String orderid = request.getParameter("orderid");		Order order = orderService.selectByOrderNum(orderid);		Main mm=new Main();		//mm.test_trade_precreate(resp,order);	}	//测试微信二维码(直接输出到响应位置)	@RequestMapping(value="order/getwxQR",method = RequestMethod.GET)	public void getwxQR(HttpServletResponse resp, HttpServletRequest request) throws IOException {		String orderid = request.getParameter("orderid");		Order order = orderService.selectByOrderNum(orderid);		//得到待解码的base64图片		String wx=payService.getWeixinQR(order).replace("data:image/png;base64,","");byte[] b = null;		if(wx != null){			BASE64Decoder decoder = new BASE64Decoder();			try {				b = decoder.decodeBuffer(wx);			} catch (Exception e) {				e.printStackTrace();			}		}		for (int i = 0; i < b.length; ++i) {			if (b[i] < 0) {				b[i] += 256;			}		}		OutputStream os = resp.getOutputStream();		os.write(b);		os.flush();		os.close();	}	/*//微信、支付宝支付结果轮询(到支付宝去查询订单)	@RequestMapping(value="order/PayQuery",method = RequestMethod.GET)	@ResponseBody	public String PayQuery(HttpServletRequest request){		String  orderNum=request.getParameter("id");		Order order = orderService.selectByOrderNum(orderNum);		String queryRes=payService.payQuery(order);		//轮询支付成功，修改订单状态		if("A001".equals(queryRes)){			//由于轮询的耗时存在不确定性，可能出现一次查询未返回结果时，下一次查询已开启，（测试中出现过）为了保证只更改一次数据表，			// 尤其是柚点充值时，需保证只增加一次点数，因此每次查询后重新读取订单状态，保证上一次更改结果success及时获得			Order orderTheLatest = orderService.selectByOrderNum(orderNum);			logger.info("------------轮询支付成功");			if(!"success".equals(orderTheLatest.getStatus())) {				orderTheLatest.setStatus(Order.status_paysuccess);				orderService.update(orderTheLatest);				logger.info("-------------修改订单状态success");				//如果是柚点订单则更新用户柚点数据				if( orderTheLatest.getOrderNum().startsWith("Y") ){					Account acc = LoginUserHolder.getLoginAccount();					String item=orderTheLatest.getTemplateName();					Youdian yd=new Youdian();					yd.setItem(item);					int obtain=youdianService.selectOne(yd).getQuantity();					acc.setYoudian(acc.getYoudian()+obtain);					accountService.update(acc);					logger.info("-------------增加用户柚点");					RequestHolder.getSession().setAttribute(FrontContainer.USER_INFO, acc);//更新session中的账号信息					return "A001";				}				//如果是会员充值订单则更新用户的会员到期日				else if( orderTheLatest.getOrderNum().startsWith("H") ){					Account acc = LoginUserHolder.getLoginAccount();					String item=orderTheLatest.getTemplateName();					Youdian yd=new Youdian();					yd.setItem(item);					int addVipDate=youdianService.selectOne(yd).getQuantity();                    String accVipDate=acc.getVipDate();                    Date startDate=new Date();                    try {                        //如果会员尚未过期，则以该日期为计时起点                        if(accVipDate!=null && sdf.parse(accVipDate).after(startDate)){                            startDate=sdf.parse(accVipDate);                        }                        acc.setVipDate(sdf.format(org.apache.commons.lang.time.DateUtils.addDays(startDate,addVipDate)));                    } catch (ParseException e) {                        e.printStackTrace();                    }					accountService.update(acc);					logger.info("-------------增加用户会员天数");					RequestHolder.getSession().setAttribute(FrontContainer.USER_INFO, acc);//更新session中的账号信息					return "A001";					//普通订单				}else {					Template template = templateService.selectById(orderTheLatest.getTemplateId() + "");					templateService.updateSellCount(template);				}			}		}		return queryRes;	}*/	//微信、支付宝支付结果轮询(到数据库查询订单状态)	@RequestMapping(value="order/PayQuery",method = RequestMethod.GET)	@ResponseBody	public String PayQuery(HttpServletRequest request){		String orderNum=request.getParameter("id");		Order order = orderService.selectByOrderNum(orderNum);		String queryRes="A003";		if(order != null && order.getStatus().equals("success")){			queryRes="A001";		}		System.out.println("------轮询结果------"+queryRes);		return queryRes;	}	//柚点订单生成	@RequestMapping(value="auth/order/youdian")	public String youdian(HttpServletRequest request){		Account account = getLoginAccount();		if (account == null || StringUtils.isBlank(account.getId())) {			return page_toLoginRedirect;		}		//柚点充值类型		String type=request.getParameter("type");		Youdian  youdian=new Youdian();		Order orderWait = new Order();		youdian.setId(type);		youdian=youdianService.selectOne(youdian);		String item=youdian.getItem();		String price=youdian.getPrice();		//查询未支付的，等额的柚点订单		orderWait.setAccount(account.getId());		orderWait.setTemplateName(item);		orderWait.setAmount(price);		orderWait.setStatus(Order.status_waitforpay);		Order order = orderService.selectYoudianOrder(orderWait);		if(order==null){			//创建订单对象			order = new Order();			order.setAccount(account.getId());			order.setStatus(Order.status_waitforpay);			//通过redis设置订单号			String orderNum=redisCacheProvider.numberGenerator("Y");//("Y"代表柚点充值)			order.setOrderNum(orderNum);			/*//由于现在支付接口不支持重复提交同一订单，所以采用随机数合成此接口专用订单号			order.setRemark("M"+(int)((Math.random()*9+1)*10000));*/			order.setTemplateName(item);			order.setPayType(3);//柚点订单			order.setAmount(price);			int orderId= orderService.insert(order);			order.setId(String.valueOf(orderId));		}		return "forward:/auth/order/moneypay?id="+order.getOrderNum();		//return null;	}    //充值会员订单生成    @RequestMapping(value="auth/order/memberorder")    public String memberorder(HttpServletRequest request){        Account account = getLoginAccount();        if (account == null || StringUtils.isBlank(account.getId())) {            return page_toLoginRedirect;        }        //会员充值类型        String type=request.getParameter("type");        Youdian  youdian=new Youdian();		Order orderWait = new Order();        youdian.setId(type);        youdian=youdianService.selectOne(youdian);        String item=youdian.getItem();        String price=youdian.getPrice();        //查询未支付的，等额的会员订单		orderWait.setAccount(account.getId());		orderWait.setTemplateName(item);		//对于柚会员（1个月），		if(type.equals("6")){			orderWait.setStatus(Order.status_paysuccess);			orderWait.setAmount("6.66");//			Order order2 = orderService.selectYoudianOrder(orderWait);			if(order2==null){//代表此用户尚未享受过6.6元购买柚会员（1个月）				orderWait.setAmount("6.66");			}else{				orderWait.setAmount(price);			}		}		orderWait.setStatus(Order.status_waitforpay);        Order order = orderService.selectYoudianOrder(orderWait);        if(order==null){            //创建订单对象            order = new Order();            order.setAccount(account.getId());            order.setStatus(Order.status_waitforpay);            //通过redis设置订单号            String orderNum=redisCacheProvider.numberGenerator("H");//("H"代表会员充值)            order.setOrderNum(orderNum);            order.setTemplateName(item);            order.setPayType(4);//会员订单			order.setAmount(price);			//对于柚会员（1个月），首次购买仅售6.66，判断如下			if(type.equals("6")){				orderWait.setStatus(Order.status_paysuccess);				orderWait.setAmount("6.66");//				//orderWait.setAmount(null);				Order order2 = orderService.selectYoudianOrder(orderWait);				if(order2==null){//代表此用户尚未享受过6.6元购买柚会员（1个月）					order.setAmount("6.66");				}			}            int orderId= orderService.insert(order);            order.setId(String.valueOf(orderId));        }        return "forward:/auth/order/moneypay?id="+order.getOrderNum();    }	//支付宝网页支付-发送参数	@RequestMapping(value="auth/order/toPagePay")	public void toPagePay(HttpServletRequest request,HttpServletResponse response) throws IOException, AlipayApiException {		InputStream propertiesInput = Thread.currentThread().getContextClassLoader().getResourceAsStream("zfbinfo.properties");		Properties properties = new Properties();		properties.load(propertiesInput);		//获得初始化的AlipayClient		//AlipayClient alipayClient = new DefaultAlipayClient(AlipayConfig.gatewayUrl, AlipayConfig.app_id, AlipayConfig.merchant_private_key, "json", AlipayConfig.charset, AlipayConfig.alipay_public_key, AlipayConfig.sign_type);		AlipayClient alipayClient = new DefaultAlipayClient(properties.getProperty("open_api_domain").trim(),properties.getProperty("appid").trim(),properties.getProperty("private_key").trim(),"json","utf-8",properties.getProperty("alipay_public_key").trim(),"RSA2");		//设置请求参数		AlipayTradePagePayRequest alipayRequest = new AlipayTradePagePayRequest();//	alipayRequest.setReturnUrl(AlipayConfig.return_url);//	alipayRequest.setNotifyUrl(AlipayConfig.notify_url);		alipayRequest.setReturnUrl("http://www.yomoer.cn/paygate/zfbReturn");		alipayRequest.setNotifyUrl("http://www.yomoer.cn/paygate/zfbNotify");		String orderNum=request.getParameter("orderNum");		Order order=orderService.selectByOrderNum(orderNum);		//商户订单号，商户网站订单系统中唯一订单号，必填		String out_trade_no = new String(order.getOrderNum().getBytes("utf-8"),"utf-8");		//付款金额，必填		String total_amount = new String(order.getAmount().getBytes("utf-8"),"utf-8");		//订单名称，必填		String subject = new String(order.getTemplateName().getBytes("utf-8"),"utf-8");		//商品描述，可空		String body = new String("".getBytes("utf-8"),"utf-8");		alipayRequest.setBizContent("{\"out_trade_no\":\""+ out_trade_no +"\","				+ "\"total_amount\":\""+ total_amount +"\","				+ "\"subject\":\""+ subject +"\","				+ "\"body\":\""+ body +"\","				+ "\"product_code\":\"FAST_INSTANT_TRADE_PAY\"}");		//若想给BizContent增加其他可选请求参数，以增加自定义超时时间参数timeout_express来举例说明		//alipayRequest.setBizContent("{\"out_trade_no\":\""+ out_trade_no +"\","		//		+ "\"total_amount\":\""+ total_amount +"\","		//		+ "\"subject\":\""+ subject +"\","		//		+ "\"body\":\""+ body +"\","		//		+ "\"timeout_express\":\"10m\","		//		+ "\"product_code\":\"FAST_INSTANT_TRADE_PAY\"}");		//请求参数可查阅【电脑网站支付的API文档-alipay.trade.page.pay-请求参数】章节		//请求		String result = alipayClient.pageExecute(alipayRequest).getBody();		//输出		response.setContentType("text/html;charset=utf-8");		request.setCharacterEncoding("utf-8");		response.setCharacterEncoding("utf-8");		response.getWriter().write(result);		response.getWriter().flush();		response.getWriter().close();		//out.println(result);	}}