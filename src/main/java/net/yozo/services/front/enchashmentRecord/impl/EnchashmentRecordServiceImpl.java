package net.yozo.services.front.enchashmentRecord.impl;import com.alipay.api.AlipayApiException;import com.alipay.api.AlipayClient;import com.alipay.api.DefaultAlipayClient;import com.alipay.api.request.AlipayFundTransToaccountTransferRequest;import com.alipay.api.response.AlipayFundTransToaccountTransferResponse;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import net.yozo.core.ServersManager;import net.yozo.core.dao.page.PagerModel;import net.yozo.services.front.enchashmentRecord.EnchashmentRecordService;import net.yozo.services.front.enchashmentRecord.bean.EnchashmentRecord;import net.yozo.services.front.enchashmentRecord.dao.EnchashmentRecordDao;import net.yozo.services.front.order.dao.OrderDao;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.io.IOException;import java.io.InputStream;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import java.util.Properties;@Service("enchashmentRecordServiceFront")public class EnchashmentRecordServiceImpl extends ServersManager<EnchashmentRecord, EnchashmentRecordDao> implements        EnchashmentRecordService {    private static final Logger logger = LoggerFactory.getLogger(EnchashmentRecordServiceImpl.class);    @Resource(name = "enchashmentRecordDaoFront")    @Override    public void setDao(EnchashmentRecordDao enchashmentRecordDao) {        this.dao = enchashmentRecordDao;    }    @Resource(name="orderDaoFront")    private OrderDao orderDao;    @Override    public BigDecimal selectAllEnchashmentByAccount(Integer accountId){        return dao.selectAllEnchashmentByAccount(accountId);    }    public synchronized int enchashment(EnchashmentRecord e){        int flag=0;        String allIncome=orderDao.selectAllIncomeByAccount(e.getAccountId());        BigDecimal income=new BigDecimal(allIncome);        BigDecimal allenchashment=dao.selectAllEnchashmentByAccount(e.getAccountId());        BigDecimal wallet = income.subtract(allenchashment);        if(new BigDecimal("0.1").compareTo(wallet)==1){            logger.info("用户非法操作，可提现金额未满200，accountId:"+e.getAccountId());            return flag;        }        InputStream propertiesInput = Thread.currentThread().getContextClassLoader().getResourceAsStream("zfbinfo.properties");        Properties properties = new Properties();        try {            properties.load(propertiesInput);        } catch (IOException expection) {            expection.printStackTrace();        }        AlipayClient alipayClient = new DefaultAlipayClient(properties.getProperty("open_api_domain"),properties.getProperty("appid"),properties.getProperty("private_key"),"json","GBK",properties.getProperty("alipay_public_key"),"RSA2");        AlipayFundTransToaccountTransferRequest request = new AlipayFundTransToaccountTransferRequest();        request.setBizContent("{" +                "\"out_biz_no\":\""+e.getNo()+"\"," +//订单号                "\"payee_type\":\"ALIPAY_LOGONID\"," +//支付宝登录号，支持邮箱和手机号格式。或者ALIPAY_USERID：支付宝账号对应的支付宝唯一用户号。以2088开头的16位纯数字组成。                "\"payee_account\":\""+e.getAlipayAccount()+"\"," +//与上一个参数对应的账号                "\"amount\":\""+wallet+"\"," +//金额、元、不得小于0.1                "\"payer_show_name\":\"\"," +//付款方姓名。可选                "\"payee_real_name\":\"\"," +//可选                "\"remark\":\"柚墨平台-收入提现\"" +//可选                "}");        AlipayFundTransToaccountTransferResponse response = null;        try {            response = alipayClient.execute(request);        } catch (AlipayApiException ex) {            logger.error("提现报错，用户id:"+e.getAccountId()+"提现单号："+e.getNo());            ex.printStackTrace();            return flag;        }        if(!response.isSuccess()){            logger.info("提现操作失败，用户id:"+e.getAccountId()+"提现单号："+e.getNo());            logger.info("提现操作失败，报错信息："+response.getSubMsg()+",支付宝错误码:"+response.getSubCode());            return flag;        } else {            e.setCreatedTime(new Date());            e.setAmount(wallet);            e.setOrderId(response.getOrderId());            dao.insert(e);            flag=1;//调用成功            return flag;        }    }    public JSONObject selectEnchashmentList(EnchashmentRecord e){        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm");        JSONObject result = new JSONObject();        PagerModel pager=dao.selectPageList(e);        pager.setPageSize(5);        pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)/ pager.getPageSize());        List<EnchashmentRecord> ers=pager.getList();        JSONArray arr = new JSONArray();        if (ers != null && ers.size() >0) {            for(EnchashmentRecord er : ers){                JSONObject obj = new JSONObject();                obj.put("no",er.getNo());                obj.put("createdTime",sdf.format(er.getCreatedTime()));                obj.put("amount",er.getAmount());                arr.add(obj);            }        }        result.put("list", arr);        result.put("total",pager.getTotal());//总记录数        result.put("pagerSize",pager.getPagerSize()); //总页数        result.put("offset",e.getOffset());//分页偏移量        return result;    }    public int selectPageCount(Integer account){        return dao.selectPageCount(account);    }}