package net.yozo.services.front.order.impl;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import net.yozo.core.FrontContainer;import net.yozo.core.ServersManager;import net.yozo.core.dao.page.PagerModel;import net.yozo.core.front.*;import net.yozo.services.front.account.AccountService;import net.yozo.services.front.account.bean.Account;import net.yozo.services.front.order.OrderService;import net.yozo.services.front.order.bean.Order;import net.yozo.services.front.order.bean.OrderRecordForCustomize;import net.yozo.services.front.order.bean.OrderSimpleReport;import net.yozo.services.front.order.bean.OrdersReport;import net.yozo.services.front.order.dao.OrderDao;import net.yozo.services.front.orderdetail.bean.Orderdetail;import net.yozo.services.front.orderdetail.dao.OrderdetailDao;import net.yozo.services.front.orderlog.bean.Orderlog;import net.yozo.services.front.orderlog.dao.OrderlogDao;import net.yozo.services.front.orderpay.bean.Orderpay;import net.yozo.services.front.orderpay.dao.OrderpayDao;import net.yozo.services.front.ordership.bean.Ordership;import net.yozo.services.front.ordership.dao.OrdershipDao;import org.apache.commons.lang.StringUtils;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.text.SimpleDateFormat;import java.util.List;@Service("orderServiceFront")public class OrderServiceImpl extends ServersManager<Order, OrderDao> implements		OrderService {	private static final org.slf4j.Logger logger = LoggerFactory			.getLogger(OrderServiceImpl.class);    @Autowired    @Override    public void setDao(OrderDao orderDao) {        this.dao = orderDao;    }    @Autowired	private OrderdetailDao orderdetailDao;    @Autowired	private OrderpayDao orderpayDao;    @Autowired	private OrdershipDao ordershipDao;    @Autowired	private OrderlogDao orderlogDao;    @Autowired	private AccountService accountService;	public void setAccountService(AccountService accountService) {		this.accountService = accountService;	}	public void setOrderpayDao(OrderpayDao orderpayDao) {		this.orderpayDao = orderpayDao;	}	public void setOrderlogDao(OrderlogDao orderlogDao) {		this.orderlogDao = orderlogDao;	}	public void setOrdershipDao(OrdershipDao ordershipDao) {		this.ordershipDao = ordershipDao;	}	public void setOrderdetailDao(OrderdetailDao orderdetailDao) {		this.orderdetailDao = orderdetailDao;	}	public boolean createOrder(Order order, List<Orderdetail> orderdetailList,Ordership ordership)			throws Exception {		if(order==null ){			throw new NullPointerException("参数不能为空！");		}				//创建订单		int orderID = dao.insert(order);		logger.debug("orderID=" + orderID);				//创建支付记录对象		Orderpay orderpay = new Orderpay();		orderpay.setOrderid(order.getId());		orderpay.setPaystatus(Orderpay.orderpay_paystatus_n);		orderpay.setPayamount(Double.valueOf(order.getAmount()));		orderpay.setPaymethod(Orderpay.orderpay_paymethod_alipayescow);		int orderpayID = orderpayDao.insert(orderpay);		logger.error("orderpayID="+orderpayID);		order.setOrderpayID(String.valueOf(orderpayID));		return true;	}	@Override	public List<Order> selectOrderInfo(Order order) {		return dao.selectOrderInfo(order);	}//	@Override//	public boolean updateOrderStatus(Order order) {//		if(order==null){//			throw new NullPointerException("参数不能为空！");//		}////		Orderpay orderpay = orderpayDao.selectById(order.getOrderpayID());//		if(orderpay==null){//			throw new NullPointerException("根据支付记录号查询不到支付记录信息！");//		}//		String orderid = orderpay.getOrderid();//订单ID//		//		//更新支付记录为成功支付//		Orderpay orderpay2 = new Orderpay();//		orderpay2.setId(order.getOrderpayID());//		orderpay2.setTradeNo(order.getTradeNo());//		orderpay2.setPaystatus(Orderpay.orderpay_paystatus_y);//		orderpayDao.update(orderpay2);//		//		//更新订单的支付状态为成功支付//		order.setId(orderid);//		order.setPaystatus(Order.order_paystatus_y);//		dao.update(order);//		return true;//	}		@Override	public boolean alipayNotify(String trade_status,String refund_status,String out_trade_no,String trade_no) {		try {			return alipayNotify0(trade_status, refund_status, out_trade_no, trade_no);		} catch (Exception e) {			logger.error(">>>alipayNotify...Exception..");			e.printStackTrace();			return false;		}	}		private boolean alipayNotify0(String trade_status,String refund_status,String out_trade_no,String trade_no) {		synchronized (FrontContainer.alipay_notify_lock) {			logger.error("trade_status = " + trade_status + ",refund_status = " + refund_status + ",out_trade_no = " + out_trade_no + ",trade_no = " + trade_no);			if ((StringUtils.isBlank(trade_status)					&& StringUtils.isBlank(refund_status)) || (StringUtils.isBlank(out_trade_no)							&& StringUtils.isBlank(trade_no))) {				logger.error("请求非法!");				return false;			}			String orderpayID = null;			if(out_trade_no.startsWith("test")){				//此处做一个说明,localhost或127.0.0.1下的订单的请求发给支付宝的商户订单号都是test开头的，正式的都是非test开头的。				//可以参见OrdersAction.createPayInfo()方法。				orderpayID = out_trade_no.substring(4);			}else{				orderpayID = out_trade_no;			}			logger.error("orderpayID = " + orderpayID);			Orderpay orderpay = orderpayDao.selectById(orderpayID);			if(orderpay==null){				throw new NullPointerException("根据支付记录号查询不到支付记录信息！");			}			String orderid = orderpay.getOrderid();//订单ID			String content = null;						if(StringUtils.isNotBlank(refund_status)){			}else if(StringUtils.isNotBlank(trade_status)){				/**				 * 交易流程				 */				if(trade_status.equals("WAIT_BUYER_PAY")){//等待买家付款					content = "【支付宝异步通知】等待买家付款(WAIT_BUYER_PAY)。";									}else if(trade_status.equals("WAIT_SELLER_SEND_GOODS")){//已付款，等待卖家发货					content = "【支付宝异步通知】已付款，等待卖家发货(WAIT_SELLER_SEND_GOODS)。";					//更新支付记录为【成功支付】					Orderpay orderpay2 = new Orderpay();					orderpay2.setId(orderpayID);					orderpay2.setTradeNo(trade_no);					orderpay2.setPaystatus(Orderpay.orderpay_paystatus_y);					orderpayDao.update(orderpay2);										String lowStocks = null;//订单是否缺货记录					//更新订单的支付状态为【已支付】					Order order = new Order();					order.setId(orderid);					order.setStatus(Order.status_paysuccess);					dao.update(order);				}else if(trade_status.equals("WAIT_BUYER_CONFIRM_GOODS")){//已发货，等待买家确认收货					content = "【支付宝异步通知】已发货，等待买家确认收货(WAIT_BUYER_CONFIRM_GOODS)。";					//更新订单状态为【已发货】					Order order = dao.selectById(orderid);					if(order==null){						throw new NullPointerException("根据订单号查询不到订单信息，orderid="+orderid);					}					logger.error("order.getStatus()"+order.getStatus()+",trade_status=WAIT_BUYER_CONFIRM_GOODS");									}else if(trade_status.equals("TRADE_FINISHED")){//交易完成					content = "【支付宝异步通知】交易完成(TRADE_FINISHED)。";										Order order = dao.selectById(orderid);					if(order==null){						throw new NullPointerException("根据订单号查询不到订单信息，orderid="+orderid);					}										//订单结束后，订单上面赠送的积分都成功转移到用户账户上。					Account acc = new Account();					acc.setId(order.getAccount());					acc.setAddScore(order.getScore());//支付完成					accountService.updateScore1(acc);										//更新订单状态为【已签收】					order = new Order();					order.setId(orderid);					order.setStatus(Order.status_paysuccess);					dao.update(order);				}else{					//一般不会出现					content = "【支付宝异步通知】未知。trade_status = " + trade_status;				}			}else{				throw new RuntimeException("运行异常!");			}						/**			 * 以上代码,如不可以返回都会走到此处,记录下日志.			 */			insertOrderlog(orderid, content);						return true;		}	}		/**	 * 插入订单操作日志	 * @param orderid	订单ID	 * @param content	日志内容	 */	private void insertOrderlog(String orderid,String content) {		Orderlog orderlog = new Orderlog();		orderlog.setOrderid(orderid);//订单ID		orderlog.setAccount("alipay_notify");//操作人账号		orderlog.setContent(content);//日志内容		orderlog.setAccountType(Orderlog.orderlog_accountType_p);		orderlogDao.insert(orderlog);	}	@Override	public OrderSimpleReport selectOrdersSimpleReport(String Emailaccount) {		return dao.selectOrdersSimpleReport(Emailaccount);	}	@Override	public Order selectOrderByAidAndTid(String aid, String tid) {		Order order = new Order();		order.setAccount(aid);		order.setTemplateId(Integer.parseInt(tid));		return dao.selectByAccAndTid(order);	}	@Override	public OrdersReport loadOrdersReport() {		return dao.loadOrdersReport();	}	@Override	public Order selectByOrderNum(String orderNum) {		return dao.selectByOrderNum(orderNum);	}	@Override	public Order selectYoudianOrder(Order order) {		return dao.selectYoudianOrder(order);	}	@Override	public int selectCount(Order order) {		return dao.selectCount(order);	}	@Override	public PagerModel selectOrderRecordForCustomize(OrderRecordForCustomize e) {		PagerModel pager=dao.selectOrderRecordForCustomize(e);		if(pager!=null){//将用户名改为X**Y的格式			String nickname=null;			List<OrderRecordForCustomize> list=pager.getList();			for (OrderRecordForCustomize o:list) {				nickname=o.getNickname();				o.setNickname(nickname.substring(0,1)+"***"+nickname.substring(nickname.length()-1));			}		}		return pager;	}	/**	 * 检索定制订单	 * @param order	 * @return	 */	public Order selectCustomizeOrder(Order order){		return this.dao.selectCustomizeOrder(order);	}	public String selectAllIncomeByAccount(Integer account){		return dao.selectAllIncomeByAccount(account);	}	//查询用户的作品销量	public int selectTemplateSalesCount(Integer account){		return dao.selectTemplateSalesCount(account);	}	//查询用户的定制作品销量	public int selectCustomizeSalesCount(Integer account){		return dao.selectCustomizeSalesCount(account);	}	public JSONObject selectIncomeList(Order e){		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");		JSONObject result = new JSONObject();		PagerModel pager=dao.selectIncomePageList(e);		pager.setPageSize(5);		pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)/ pager.getPageSize());		List<Order> orders=pager.getList();		JSONArray arr = new JSONArray();		if (orders != null && orders.size() >0) {			for(Order o : orders){				JSONObject obj = new JSONObject();				obj.put("id",o.getId());				obj.put("finishTime",sdf.format(o.getFinishTime()));				obj.put("templateName",o.getTemplateName());				obj.put("nowPrice",o.getNowPrice());				obj.put("amount",o.getAmount());				obj.put("type",o.getType());				arr.add(obj);			}		}		result.put("list", arr);		result.put("total",pager.getTotal());//总记录数		result.put("pagerSize",pager.getPagerSize()); //总页数		result.put("offset",e.getOffset());//分页偏移量		return result;	}	public int selectIncomePageCount(Integer account){		return dao.selectIncomePageCount(account);	}}