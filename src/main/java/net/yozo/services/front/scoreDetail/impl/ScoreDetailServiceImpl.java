package net.yozo.services.front.scoreDetail.impl;import net.yozo.account.dto.AccountInfo;import net.yozo.account.mapper.ext.TAccountInfoExtMapper;import net.yozo.core.ServersManager;import net.yozo.core.cache.RedisCacheProvider;import net.yozo.services.front.order.bean.Order;import net.yozo.services.front.scoreDetail.ScoreDetailService;import net.yozo.services.front.scoreDetail.bean.ScoreDetail;import net.yozo.services.front.scoreDetail.dao.ScoreDetailDao;import net.yozo.services.front.scoreTask.bean.ScoreTask;import net.yozo.services.front.scoreTask.dao.ScoreTaskDao;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.annotation.Resource;@Service("scoreDetailServiceFront")public class ScoreDetailServiceImpl extends ServersManager<ScoreDetail, ScoreDetailDao> implements        ScoreDetailService {    private static final Logger logger = LoggerFactory.getLogger(ScoreDetailServiceImpl.class);    @Resource(name = "scoreDetailDaoFront")    @Override    public void setDao(ScoreDetailDao scoreDetailDao) {        this.dao = scoreDetailDao;    }    @Autowired    private RedisCacheProvider redisCacheProvider;    @Resource    private TAccountInfoExtMapper tAccountInfoExtMapper;    @Resource(name="scoreTaskDaoFront")    private ScoreTaskDao scoreTaskDao;    @Override    @Transactional    public void addScoreAllOperations(String accid,String flag ){        //根据flag获取积分任务        ScoreTask scoreTask=scoreTaskDao.getScoreTaskByFlag(flag);        int type=scoreTask.getType();        AccountInfo accountInfo=new AccountInfo();        accountInfo.setAccountId(Integer.parseInt(accid));        accountInfo=tAccountInfoExtMapper.select(accountInfo);        ScoreDetail scoreDetail=new ScoreDetail();        scoreDetail.setAccount(accid);        scoreDetail.setTaskid(scoreTask.getId());        scoreDetail.setScore(scoreTask.getScore());        if(type==scoreTask.scoreTask_daily||type==scoreTask.scoreTask_times){            //每日任务和成长任务（一日多次）            //先判断每日任务是否已达到每天的上限            String key="scoreTask_"+accid+"_"+type+"_"+flag;            Object t=redisCacheProvider.get(key);            int times=Integer.parseInt(t==null?"0":t.toString());            if(times<scoreTask.getTimes()){               try {                   //没有达到上限，用户表更新积分数值                   accountInfo.setScore(accountInfo.getScore()+scoreTask.getScore());                   tAccountInfoExtMapper.updateScore(accountInfo);                   //增加积分明细                   dao.insert(scoreDetail);                   //增加或修改redis                   redisCacheProvider.put24(key,String.valueOf(times+1));               }catch (Exception e){                   logger.error("增加积分明细出现错误,redis的key:"+key);               }                //每日任务前三项                if("daily_mrqd".equals(flag)||"daily_mbxz".equals(flag)||"daily_mbdh".equals(flag)){                    String s="scoreTask_"+accid+"_"+type+"_";                    Object o1=redisCacheProvider.get(s+"daily_mrqd");                    Object o2=redisCacheProvider.get(s+"daily_mbxz");                    Object o3=redisCacheProvider.get(s+"daily_mbdh");                    if(o1!=null && o2!=null && o3!=null){                        addScoreAllOperations(accid,"daily_qsew");                    }                }            }        }else if(type==scoreTask.scoreTask_once){            //成长任务只限一次            accountInfo.setScore(accountInfo.getScore()+scoreTask.getScore());            if("once_xgnc".equals(flag)){                if(accountInfo.getNicknameChange()==0){                    accountInfo.setNicknameChange(1);                    tAccountInfoExtMapper.updateScore(accountInfo);                    dao.insert(scoreDetail);                }            }else if("once_xgtx".equals(flag)){                if(accountInfo.getAvaterChange()==0){                    accountInfo.setAvaterChange(1);                    tAccountInfoExtMapper.updateScore(accountInfo);                    dao.insert(scoreDetail);                }            }else{                ScoreDetail once=dao.selectOne(scoreDetail);                if(once==null){                    tAccountInfoExtMapper.updateScore(accountInfo);                    dao.insert(scoreDetail);                }            }        }    }    @Override    @Transactional    public String reduceScoreAllOperations(Order order){        ScoreDetail scoreDetail=new ScoreDetail();        AccountInfo accountInfo=new AccountInfo();        accountInfo.setAccountId(Integer.parseInt(order.getAccount()));        accountInfo=tAccountInfoExtMapper.select(accountInfo);        String jifen=order.getAmount();        int score= Integer.parseInt(jifen.substring(0,jifen.indexOf(".")));//积分需取整        if(accountInfo.getScore()-score<0){            return "fail";//积分不足        }        //更新用户积分信息        accountInfo.setScore(accountInfo.getScore()-score);        tAccountInfoExtMapper.updateScore(accountInfo);        //添加积分明细信息        scoreDetail.setAccount(order.getAccount());        scoreDetail.setScore(score);        scoreDetail.setOrderid(order.getId());        dao.insert(scoreDetail);        //用户成长值添加，消耗积分1:1增加成长值        accountInfo.setAddGrowthValue(score*accountInfo.scale_score);        tAccountInfoExtMapper.updateGrowthValue(accountInfo);        //积分相关任务        addScoreAllOperations(order.getAccount(),"daily_mbdh");//每日任务积分兑换        addScoreAllOperations(order.getAccount(),"times_dhmb");//成长任务（多次）        return "success";    }}