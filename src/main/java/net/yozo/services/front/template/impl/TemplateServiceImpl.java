package net.yozo.services.front.template.impl;import net.sf.json.JSONObject;import net.yozo.core.ServersManager;import net.yozo.core.dao.page.PagerModel;import net.yozo.services.front.favorite.bean.Favorite;import net.yozo.services.front.favorite.dao.FavoriteDao;import net.yozo.services.front.template.TemplateService;import net.yozo.services.front.template.bean.Template;import net.yozo.services.front.template.dao.TemplateDao;import net.yozo.services.front.template.dto.RelatedTemplateQuery;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Repository;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;@Repositorypublic class TemplateServiceImpl extends ServersManager<Template, TemplateDao> implements        TemplateService {	private static final Logger logger = LoggerFactory.getLogger(TemplateServiceImpl.class);	@Autowired	private FavoriteDao favoriteDao;	@Override	@Autowired	public void setDao(TemplateDao templateDao) {        this.dao = templateDao;    }	/**	 * 批量删除商品	 * 包括:	 * 1、模板表数据。	 * 2、模板关联表数据。	 * @param ids	 * @return	 */	public int deletes(String[] ids) {		if (ids != null && ids.length > 0) {			for (int i = 0; i < ids.length; i++) {				String id = ids[i];				logger.error("删除商品deleteById.id="+id);				if(StringUtils.isBlank(id)){					throw new NullPointerException();				}				dao.deleteById(Integer.parseInt(id));				dao.deleteLabelLinkByTemplateID(Integer.parseInt(id));			}		}		return 0;	}	@Override	public void updateTemplateStatus(String[] ids, int status, String updateAccount) {			for (int i = 0; i < ids.length; i++) {				if(StringUtils.isBlank(ids[i])){					throw new NullPointerException("模板ID不能存在空的！");				}				Template p = new Template();				p.setId(ids[i]);				p.setStatus(status);				dao.updateTemplateStatus(p);		}	}	@Override	public List<Template> selectTemplateListByIds(Template p) {		return dao.selectTemplateListByIds(p);	}	@Override	public List<Template> selectIndexList(Template template) {		return dao.selectIndexList(template);	}	@Override	public void updateHit(Template p) {		dao.updateHit(p);	}	@Override	public void updateSellCount(Template p) {		dao.updateSellCount(p);	}	@Override	public List<String> getLabelNamesById(String id) {		return dao.getLabelNamesById(id);	}	/**	 * 分页查询	 *	 * @param e	 * @return	 */	public PagerModel queryPageList(Template e) {		return dao.selectPageList(e);	}	@Override	public PagerModel queryKeyWordsPageList(Template e) {		return dao.queryKeywords(e);	}	public PagerModel queryTemplateUploadList(Template e){		return dao.queryTemplateUploadList(e);	}	@Override	public Template selectForDelete(Template e) {		return dao.selectForDelete(e);	}	@Override	public PagerModel selectDesignerWorks(Template e) {		return dao.selectDesignerWorks(e);	}	@Override	public int selectUserTemplateCount(Template e){		return dao.selectUserTemplateCount(e);	}	/**	 * 获取相关推荐模板	 * @param templateId  模板ID	 * @return	 */	@Override	public JSONObject getRelatedTempalte(Integer templateId,int currentPage,String accId ){		JSONObject result = new JSONObject();		List<Template> templateList = new ArrayList<Template>();		RelatedTemplateQuery queryDto = new RelatedTemplateQuery();		queryDto.setTempalteId(templateId);		int relatedTempalteCount =dao.getRelatedTempalteCount(queryDto);		//相关推荐小于24个		if (relatedTempalteCount <24){			if (currentPage == 4){				currentPage =1;			}			int start = (currentPage-1)*8;			if (start > 24 || start == 24){				currentPage =1;				start = 0;			}			queryDto.setStart(start);			result.put("currentPage",currentPage+1);			templateList = dao.getRelatedRecommendTempalte(queryDto);		}else{			int start = (currentPage-1)*8;			if (start > relatedTempalteCount || start == relatedTempalteCount){				currentPage =1;				start = 0;			}			queryDto.setStart(start);			result.put("currentPage",currentPage+1);			templateList =dao.getRelatedTempalte(queryDto);		}		if (accId != null){			//查询收藏模板			Favorite favorite = new Favorite();			favorite.setAccount(accId);			List<Favorite> list=favoriteDao.selectList(favorite);			if (list != null && list.size()>0 && templateList != null && templateList.size()>0){				for (Template template :templateList){					template.setFavorite("n");					for (Favorite fav : list){						if (template.getId().equals(fav.getProductID())){							template.setFavorite("y");						}					}				}			}		}		result.put("relatedList",templateList);		return  result;	}}