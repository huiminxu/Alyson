package net.yozo.services.front.template.dao.impl;import net.yozo.core.dao.BaseDao;import net.yozo.core.dao.page.PagerModel;import net.yozo.services.front.template.bean.Template;import net.yozo.services.front.template.dao.TemplateDao;import net.yozo.services.front.template.dto.RelatedTemplateQuery;import org.springframework.stereotype.Repository;import javax.annotation.Resource;import java.util.List;@Repositorypublic class TemplateDaoImpl implements TemplateDao {    @Resource	private BaseDao dao;	public void setDao(BaseDao dao) {		this.dao = dao;	}	public PagerModel selectPageList(Template e) {		return dao.selectPageList("front.template.selectPageList",				"front.template.selectPageCount", e);	}	public List selectList(Template e) {		return dao.selectList("front.template.selectList", e);	}	public List selectIndexList(Template e) {		return dao.selectList("front.template.loadHotTemplateShowIndex", e);	}	@Override	public List<Template> selectTemplateListByIds(Template p) {		return dao.selectList("front.template.selectTemplateListByIds", p);	}	@Override	public int deleteById(int id) {		return dao.delete("front.template.deleteById", id);	}	@Override	public Template selectById(String id) {		return  (Template) dao.selectOne("front.template.selectById", id);	}	public Template selectOne(Template e) {		return (Template) dao.selectOne("front.template.selectOne", e);	}	public int delete(Template e) {		return dao.delete("front.template.delete", e);	}	public int update(Template e) {		return dao.update("front.template.update", e);	}	@Override	public void updateHit(Template p) {		dao.update("front.template.updateHit",p);	}	@Override	public void updateSellCount(Template p) {		dao.update("front.template.updateSellCount",p);	}	@Override	public PagerModel queryKeywords(Template p) {		return dao.selectPageList("front.template.queryTemplate",				"front.template.queryTemplateCount", p);	}	public int deletes(String[] ids) {		Template e = new Template();		for (int i = 0; i < ids.length; i++) {			e.setId(ids[i]);			delete(e);		}		return 0;	}	public int insert(Template e) {		return dao.insert("front.template.insert", e);	}	@Override	public void deleteLabelLinkByTemplateID(int parseInt) {		dao.delete("front.template.deleteLabelLinkByTemplateID", parseInt);	}	@Override	public void updateImg(Template p) {		dao.update("front.template.updateImg",p);	}	@Override	public void updateTemplateStatus(Template p) {			dao.update("front.template.updateTemplateStatus",p);	}	@Override	public List<String> getLabelNamesById(String id) {		return dao.selectList("front.template.getLabelNamesById", id);	}	/**	 * 分页查询	 *	 * @param e	 * @return	 */	public PagerModel queryPageList(Template e){		return dao.selectPageList("front.template.queryTemplate",				"front.template.queryTemplateCount", e);	}	/**	 * 用户上传模板（模板管理）分页查询	 *	 * @param e	 * @return	 */	public PagerModel queryTemplateUploadList(Template e){		return dao.selectPageList("front.template.selectTemplateUploadList",				"front.template.selectTemplateUploadCount", e);	}	@Override	public Template selectForDelete(Template e) {		return (Template) dao.selectOne("front.template.selectForDelete", e);	}	@Override	public PagerModel selectDesignerWorks(Template e) {		return dao.selectPageList("front.template.selectDesignerWorks",				"front.template.selectDesignerWorksCount", e);	}	@Override	public int selectUserTemplateCount(Template e){		return (Integer) dao.selectOne("front.template.selectUserTemplateCount", e);	}	/**	 * 获取相关推荐模板	 * @param relatedTemplateQuery  模板查询类	 * @return	 */	public List<Template> getRelatedRecommendTempalte(RelatedTemplateQuery relatedTemplateQuery) {		return dao.selectList("front.template.selectRelatedRecommendTempaltes", relatedTemplateQuery);	}	/**	 * 获取相关推荐模板数量	 * @param relatedTemplateQuery  模板查询类	 * @return	 */	public int getRelatedTempalteCount(RelatedTemplateQuery relatedTemplateQuery){		return (Integer) dao.selectOne("front.template.selectRelatedTempaltesCount", relatedTemplateQuery);	}	/**	 * 获取相关推荐模板2	 * @param relatedTemplateQuery  模板查询类	 * @return	 */	public List<Template> getRelatedTempalte(RelatedTemplateQuery relatedTemplateQuery){		return dao.selectList("front.template.selectRelatedTempaltes", relatedTemplateQuery);	}}