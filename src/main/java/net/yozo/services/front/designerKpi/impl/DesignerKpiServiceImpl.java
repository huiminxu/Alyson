package net.yozo.services.front.designerKpi.impl;import net.yozo.core.ServersManager;import net.yozo.services.front.designerKpi.DesignerKpiService;import net.yozo.services.front.designerKpi.bean.DesignerKpi;import net.yozo.services.front.designerKpi.dao.DesignerKpiDao;import org.apache.commons.lang.StringUtils;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.math.BigDecimal;@Service("designerKpiServiceFront")public class DesignerKpiServiceImpl extends ServersManager<DesignerKpi, DesignerKpiDao> implements        DesignerKpiService {    @Resource(name = "designerKpiDaoFront")    @Override    public void setDao(DesignerKpiDao designerDao) {        this.dao = designerDao;    }    @Override    public DesignerKpi compareWithAverage(DesignerKpi designerKpi) {        DesignerKpi avgKPI = dao.compareWithAverage();        BigDecimal efficiencyResult = calculateResult(designerKpi.getEfficiencyScore(),avgKPI.getEfficiencyScore());        BigDecimal qualityResult = calculateResult(designerKpi.getQualityScore(),avgKPI.getQualityScore());        BigDecimal serviceResult = calculateResult(designerKpi.getServiceScore(),avgKPI.getServiceScore());        designerKpi.setEfficiencyScoreCompareWithAverage(dataHandle(efficiencyResult));        designerKpi.setQualityScoreCompareWithAverage(dataHandle(qualityResult));        designerKpi.setServiceScoreCompareWithAverage(dataHandle(serviceResult));        return designerKpi;    }    //计算设计师评分与平均值的偏离程度    public BigDecimal calculateResult(BigDecimal designerScore,BigDecimal averageScore){        return (designerScore.subtract(averageScore)).divide(averageScore, 4, BigDecimal.ROUND_CEILING);    }    //将偏离程度转换为文字显示（高/低13.13%）    public String dataHandle(BigDecimal resultToDeal) {        String res = null;        if (resultToDeal.compareTo(new BigDecimal(0)) >= 0) {            res = "高" + resultToDeal.multiply(new BigDecimal(100)).setScale(2);        } else {            res = "低" + resultToDeal.multiply(new BigDecimal(-100)).setScale(2);        }        return res;    }    /**     * 更新设计师未完成作品数量     * @param desingerId     */    public void updateDesingerUnfinishQty(Integer desingerId){        DesignerKpi designerKpi =new DesignerKpi();        designerKpi.setDesignerId(desingerId);        designerKpi = this.dao.selectOne(designerKpi);        //存在更新数量        if (designerKpi != null){            this.dao.updateDesingerUnfinishQty(desingerId);        }else {            designerKpi = new DesignerKpi();            designerKpi.setDesignerId(desingerId);            //不存在插入初始化数据            designerKpi.setUnfinishQty(1);            this.dao.insert(designerKpi);        }    }}